using SwiftlyS2.Shared.Schemas;

namespace SwiftlyS2.Core.SchemaDefinitions;

public partial interface ISceneEntity : IPointEntity {

  public ref CUtlSymbolLarge SceneFile { get; }
  
  public ref CUtlSymbolLarge ResumeSceneFile { get; }
  
  public ref CUtlSymbolLarge Target1 { get; }
  
  public ref CUtlSymbolLarge Target2 { get; }
  
  public ref CUtlSymbolLarge Target3 { get; }
  
  public ref CUtlSymbolLarge Target4 { get; }
  
  public ref CUtlSymbolLarge Target5 { get; }
  
  public ref CUtlSymbolLarge Target6 { get; }
  
  public ref CUtlSymbolLarge Target7 { get; }
  
  public ref CUtlSymbolLarge Target8 { get; }
  
  public ref CHandle<CBaseEntity> Target1 { get; }
  
  public ref CHandle<CBaseEntity> Target2 { get; }
  
  public ref CHandle<CBaseEntity> Target3 { get; }
  
  public ref CHandle<CBaseEntity> Target4 { get; }
  
  public ref CHandle<CBaseEntity> Target5 { get; }
  
  public ref CHandle<CBaseEntity> Target6 { get; }
  
  public ref CHandle<CBaseEntity> Target7 { get; }
  
  public ref CHandle<CBaseEntity> Target8 { get; }
  
  public ref CUtlSymbolLarge TargetAttachment { get; }
  
  public ref bool IsPlayingBack { get; }
  
  public ref bool Paused { get; }
  
  public ref bool Multiplayer { get; }
  
  public ref bool Autogenerated { get; }
  
  public ref float ForceClientTime { get; }
  
  public ref float CurrentTime { get; }
  
  public ref float FrameTime { get; }
  
  public ref bool CancelAtNextInterrupt { get; }
  
  public ref float Pitch { get; }
  
  public ref bool Automated { get; }
  
  public ref int AutomatedAction { get; }
  
  public ref float AutomationDelay { get; }
  
  public ref float AutomationTime { get; }
  
  public ref int SpeechPriority { get; }
  
  public ref CHandle<CBaseEntity> WaitingForThisResumeScene { get; }
  
  public ref bool WaitingForResumeScene { get; }
  
  public ref bool PausedViaInput { get; }
  
  public ref bool PauseAtNextInterrupt { get; }
  
  public ref bool WaitingForActor { get; }
  
  public ref bool WaitingForInterrupt { get; }
  
  public ref bool InterruptedActorsScenes { get; }
  
  public ref bool BreakOnNonIdle { get; }
  
  public ref bool SceneFinished { get; }
  
  public ref CUtlVector<CHandle<CBaseFlex>> ActorList { get; }
  
  public ref CUtlVector<CHandle<CBaseEntity>> RemoveActorList { get; }
  
  public ref int SceneFlushCounter { get; }
  
  public ref ushort SceneStringIndex { get; }
  
  public IEntityIOOutput OnStart { get; }
  
  public IEntityIOOutput OnCompletion { get; }
  
  public IEntityIOOutput OnCanceled { get; }
  
  public IEntityIOOutput OnPaused { get; }
  
  public IEntityIOOutput OnResumed { get; }
  
  public IEntityIOOutput OnTrigger { get; }
  
  public ref CHandle<CSceneEntity> InterruptScene { get; }
  
  public ref int InterruptCount { get; }
  
  public ref bool SceneMissing { get; }
  
  public ref bool Interrupted { get; }
  
  public ref bool CompletedEarly { get; }
  
  public ref bool InterruptSceneFinished { get; }
  
  public ref bool Restoring { get; }
  
  public ref CUtlVector<CHandle<CSceneEntity>> NotifySceneCompletion { get; }
  
  public ref CUtlVector<CHandle<CSceneListManager>> ListManagers { get; }
  
  public ref CUtlSymbolLarge SoundName { get; }
  
  public ref CUtlSymbolLarge SequenceName { get; }
  
  public ref CHandle<CBaseFlex> Actor { get; }
  
  public ref CHandle<CBaseEntity> Activator { get; }
  
  public ref int BusyActor { get; }
  
  public ref SceneOnPlayerDeath_t PlayerDeathBehavior { get; }
  
}