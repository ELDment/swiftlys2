// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_INIT_CreatePhyllotaxisImpl : CParticleFunctionInitializerImpl, C_INIT_CreatePhyllotaxis {

  public C_INIT_CreatePhyllotaxisImpl(nint handle) : base(handle) {
  }

  public ref int ControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x81F1ABBB3F31A6BD));
  }
  public ref int ScaleCP {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x81F1ABBBDE3CC5E6));
  }
  public ref int Component {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x81F1ABBBBFD0952C));
  }
  public ref float RadCentCore {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBBFED9B635));
  }
  public ref float RadPerPoint {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBBEA5B2E9B));
  }
  public ref float RadPerPointTo {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB80529536));
  }
  public ref float FpointAngle {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB762CD2A8));
  }
  public ref float FsizeOverall {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB0AF1CD99));
  }
  public ref float RadBias {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB402F6151));
  }
  public ref float MinRad {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB5B44DED6));
  }
  public ref float DistBias {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x81F1ABBB66C2666C));
  }
  public ref bool UseLocalCoords {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x81F1ABBB8AB11575));
  }
  public ref bool UseWithContEmit {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x81F1ABBB0A3190F7));
  }
  public ref bool UseOrigRadius {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x81F1ABBB3FB513D3));
  }


}