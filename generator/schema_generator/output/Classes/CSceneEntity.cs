using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CSceneEntity : CPointEntity, ISceneEntity {

  public CSceneEntity(nint handle) : base(handle) {
  }

  public CSceneEntity(nint handle, ulong hash, bool isField, bool isNetworked) : base(handle, hash, isField, isNetworked) {
  }

  public ref CUtlSymbolLarge SceneFile {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B7011ED89EC5));
  }
  public ref CUtlSymbolLarge ResumeSceneFile {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701B722F1C4));
  }
  public ref CUtlSymbolLarge Target1 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701FC55D183));
  }
  public ref CUtlSymbolLarge Target2 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701FD55D316));
  }
  public ref CUtlSymbolLarge Target3 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701FE55D4A9));
  }
  public ref CUtlSymbolLarge Target4 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701FF55D63C));
  }
  public ref CUtlSymbolLarge Target5 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B7010055D7CF));
  }
  public ref CUtlSymbolLarge Target6 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B7010155D962));
  }
  public ref CUtlSymbolLarge Target7 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B7010255DAF5));
  }
  public ref CUtlSymbolLarge Target8 {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B7010355DC88));
  }
  public ref CHandle< CBaseEntity > Target1 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701C951F3B1));
  }
  public ref CHandle< CBaseEntity > Target2 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701C651EEF8));
  }
  public ref CHandle< CBaseEntity > Target3 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701C751F08B));
  }
  public ref CHandle< CBaseEntity > Target4 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701CC51F86A));
  }
  public ref CHandle< CBaseEntity > Target5 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701CD51F9FD));
  }
  public ref CHandle< CBaseEntity > Target6 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701CA51F544));
  }
  public ref CHandle< CBaseEntity > Target7 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701CB51F6D7));
  }
  public ref CHandle< CBaseEntity > Target8 {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701C051E586));
  }
  public ref CUtlSymbolLarge TargetAttachment {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701FCD6246E));
  }
  public ref bool IsPlayingBack {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B70133D9EB62));
  }
  public ref bool Paused {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7016E4C592B));
  }
  public ref bool Multiplayer {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B70140E33A8B));
  }
  public ref bool Autogenerated {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701CD800D57));
  }
  public ref float ForceClientTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B7010AE43350));
  }
  public ref float CurrentTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B701C4610999));
  }
  public ref float FrameTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B701659DF875));
  }
  public ref bool CancelAtNextInterrupt {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B70136826B5E));
  }
  public ref float Pitch {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B701C2997925));
  }
  public ref bool Automated {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7012F7E23ED));
  }
  public ref int AutomatedAction {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1099B701249A46FB));
  }
  public ref float AutomationDelay {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B701DBCC1E77));
  }
  public ref float AutomationTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x1099B70111D56B91));
  }
  public ref int SpeechPriority {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1099B701A055E60B));
  }
  public ref CHandle< CBaseEntity > WaitingForThisResumeScene {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B7011B4B617A));
  }
  public ref bool WaitingForResumeScene {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701F33D29C4));
  }
  public ref bool PausedViaInput {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B70194DAAEC7));
  }
  public ref bool PauseAtNextInterrupt {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7017110D1BC));
  }
  public ref bool WaitingForActor {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701A8A67CC4));
  }
  public ref bool WaitingForInterrupt {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7015FF93F72));
  }
  public ref bool InterruptedActorsScenes {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7016CE93DF2));
  }
  public ref bool BreakOnNonIdle {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7012DF0ACFA));
  }
  public ref bool SceneFinished {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701B78EE50D));
  }
  public ref CUtlVector< CHandle< CBaseFlex > > ActorList {
    get => ref _Handle.AsRef<CUtlVector< CHandle< CBaseFlex > >>(Schema.GetOffset(0x1099B701ABF34ACC));
  }
  public ref CUtlVector< CHandle< CBaseEntity > > RemoveActorList {
    get => ref _Handle.AsRef<CUtlVector< CHandle< CBaseEntity > >>(Schema.GetOffset(0x1099B701C08C1458));
  }
  public ref int SceneFlushCounter {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1099B701E744BD85));
  }
  public ref ushort SceneStringIndex {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x1099B7014B743F7E));
  }
  public IEntityIOOutput OnStart {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B701C3FE848C));
  }
  public IEntityIOOutput OnCompletion {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B7010EADA43E));
  }
  public IEntityIOOutput OnCanceled {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B701F02162DB));
  }
  public IEntityIOOutput OnPaused {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B70191D78012));
  }
  public IEntityIOOutput OnResumed {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B701CCA87325));
  }
  public IEntityIOOutput OnTrigger {
    get => new CEntityIOOutput(_Handle + Schema.GetOffset(0x1099B70181E0BFEC));
  }
  public ref CHandle< CSceneEntity > InterruptScene {
    get => ref _Handle.AsRef<CHandle< CSceneEntity >>(Schema.GetOffset(0x1099B7019B121B62));
  }
  public ref int InterruptCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1099B70114AAD933));
  }
  public ref bool SceneMissing {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B7018E7EBF31));
  }
  public ref bool Interrupted {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701ECF7A431));
  }
  public ref bool CompletedEarly {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701DDF4B191));
  }
  public ref bool InterruptSceneFinished {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B701FA6A4266));
  }
  public ref bool Restoring {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1099B70103F03702));
  }
  public ref CUtlVector< CHandle< CSceneEntity > > NotifySceneCompletion {
    get => ref _Handle.AsRef<CUtlVector< CHandle< CSceneEntity > >>(Schema.GetOffset(0x1099B70111F17358));
  }
  public ref CUtlVector< CHandle< CSceneListManager > > ListManagers {
    get => ref _Handle.AsRef<CUtlVector< CHandle< CSceneListManager > >>(Schema.GetOffset(0x1099B701AD7882DF));
  }
  public ref CUtlSymbolLarge SoundName {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701B17EB157));
  }
  public ref CUtlSymbolLarge SequenceName {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x1099B701A55BC593));
  }
  public ref CHandle< CBaseFlex > Actor {
    get => ref _Handle.AsRef<CHandle< CBaseFlex >>(Schema.GetOffset(0x1099B701C0FFC404));
  }
  public ref CHandle< CBaseEntity > Activator {
    get => ref _Handle.AsRef<CHandle< CBaseEntity >>(Schema.GetOffset(0x1099B701AB093BB2));
  }
  public ref int BusyActor {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1099B70124F0E411));
  }
  public ref SceneOnPlayerDeath_t PlayerDeathBehavior {
    get => ref _Handle.AsRef<SceneOnPlayerDeath_t>(Schema.GetOffset(0x1099B701C6ECC93B));
  }

  public void IsPlayingBackUpdated() {
    Schema.Update(_Handle, 0x1099B70133D9EB62);
  }
  public void PausedUpdated() {
    Schema.Update(_Handle, 0x1099B7016E4C592B);
  }
  public void MultiplayerUpdated() {
    Schema.Update(_Handle, 0x1099B70140E33A8B);
  }
  public void AutogeneratedUpdated() {
    Schema.Update(_Handle, 0x1099B701CD800D57);
  }
  public void ForceClientTimeUpdated() {
    Schema.Update(_Handle, 0x1099B7010AE43350);
  }
  public void ActorListUpdated() {
    Schema.Update(_Handle, 0x1099B701ABF34ACC);
  }
  public void SceneStringIndexUpdated() {
    Schema.Update(_Handle, 0x1099B7014B743F7E);
  }
}