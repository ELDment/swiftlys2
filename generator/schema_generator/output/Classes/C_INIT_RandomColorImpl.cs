// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_INIT_RandomColorImpl : CParticleFunctionInitializerImpl, C_INIT_RandomColor {

  public C_INIT_RandomColorImpl(nint handle) : base(handle) {
  }

  public ref Color ColorMin {
    get => ref _Handle.AsRef<Color>(Schema.GetOffset(0x90523A48552A5834));
  }
  public ref Color ColorMax {
    get => ref _Handle.AsRef<Color>(Schema.GetOffset(0x90523A48433DC396));
  }
  public ref Color TintMin {
    get => ref _Handle.AsRef<Color>(Schema.GetOffset(0x90523A4850B36A60));
  }
  public ref Color TintMax {
    get => ref _Handle.AsRef<Color>(Schema.GetOffset(0x90523A4866A0054A));
  }
  public ref float TintPerc {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x90523A48E32BE3C6));
  }
  public ref float UpdateThreshold {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x90523A48A2303609));
  }
  public ref int TintCP {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x90523A4854940ABB));
  }
  public ParticleAttributeIndex_t FieldOutput {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x90523A48E5729606));
  }
  public ref ParticleColorBlendMode_t TintBlendMode {
    get => ref _Handle.AsRef<ParticleColorBlendMode_t>(Schema.GetOffset(0x90523A48B80E5314));
  }
  public ref float LightAmplification {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x90523A48C8D7C0AD));
  }


}