// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPlayer_WeaponServicesImpl : CPlayerPawnComponentImpl, CPlayer_WeaponServices {

  public CPlayer_WeaponServicesImpl(nint handle) : base(handle) {
  }

  public ref CUtlVector<CHandle<CBasePlayerWeapon>> MyWeapons {
    get => ref _Handle.AsRef<CUtlVector<CHandle<CBasePlayerWeapon>>>(Schema.GetOffset(0x634D22804C8A13A6));
  }
  public ref CHandle<CBasePlayerWeapon> ActiveWeapon {
    get => ref _Handle.AsRef<CHandle<CBasePlayerWeapon>>(Schema.GetOffset(0x634D2280940131C5));
  }
  public ref CHandle<CBasePlayerWeapon> LastWeapon {
    get => ref _Handle.AsRef<CHandle<CBasePlayerWeapon>>(Schema.GetOffset(0x634D2280EA5C9547));
  }
public ISchemaFixedArray<ushort> Ammo {
    get => new SchemaFixedArray<ushort>(_Handle, 0x634D22800D59E6CA, 32, 2, 2);
  }
  public ref bool PreventWeaponPickup {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x634D228093894029));
  }

  public void MyWeaponsUpdated() {
    Schema.Update(_Handle, 0x634D22804C8A13A6);
  }
  public void ActiveWeaponUpdated() {
    Schema.Update(_Handle, 0x634D2280940131C5);
  }
  public void LastWeaponUpdated() {
    Schema.Update(_Handle, 0x634D2280EA5C9547);
  }
  public void AmmoUpdated() {
    Schema.Update(_Handle, 0x634D22800D59E6CA);
  }
}