// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CRR_ResponseImpl : SchemaClass, CRR_Response {

  public CRR_ResponseImpl(nint handle) : base(handle) {
  }

  public ref byte Type {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0x7B8008788ED6D5CD));
  }
public string ResponseName {
    get {
      var ptr = _Handle + Schema.GetOffset(0x7B800878C2716964);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0x7B800878C2716964, value, 192);
  } 
public string MatchingRule {
    get {
      var ptr = _Handle + Schema.GetOffset(0x7B80087820850239);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0x7B80087820850239, value, 128);
  } 
  public ResponseParams Params {
    get => new ResponseParamsImpl(_Handle + Schema.GetOffset(0x7B800878900020D3));
  }
  public ref float MatchScore {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x7B80087861BE6F08));
  }
  public ref bool AnyMatchingRulesInCooldown {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7B800878579F1BE7));
  }
  public string SpeakerContext {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7B80087877C70A38));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7B80087877C70A38, value);
  } 
  public string WorldContext {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7B8008781DC998DF));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7B8008781DC998DF, value);
  } 
  public ResponseFollowup Followup {
    get => new ResponseFollowupImpl(_Handle + Schema.GetOffset(0x7B800878B1F72BFD));
  }
  public SchemaUntypedField RecipientFilter {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x7B800878CC301E4A));
  }


}