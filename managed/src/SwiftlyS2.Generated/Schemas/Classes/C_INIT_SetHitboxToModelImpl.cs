// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_INIT_SetHitboxToModelImpl : CParticleFunctionInitializerImpl, C_INIT_SetHitboxToModel {

  public C_INIT_SetHitboxToModelImpl(nint handle) : base(handle) {
  }

  public ref int ControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x7129E7BA3F31A6BD));
  }
  public ref int ForceInModel {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x7129E7BAA3C747AC));
  }
  public ref bool EvenDistribution {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7129E7BA84932067));
  }
  public ref int DesiredHitbox {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x7129E7BAFD09531B));
  }
  public CParticleCollectionVecInput HitBoxScale {
    get => new CParticleCollectionVecInputImpl(_Handle + Schema.GetOffset(0x7129E7BA58EE3FB7));
  }
  public ref Vector DirectionBias {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x7129E7BA5A1697CF));
  }
  public ref bool MaintainHitbox {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7129E7BAF2061926));
  }
  public ref bool UseBones {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7129E7BA10D1938B));
  }
public string HitboxSetName {
    get {
      var ptr = _Handle + Schema.GetOffset(0x7129E7BA6A21BB0E);
      return Schema.GetString(ptr);
    }
    set => Schema.SetFixedString(_Handle, 0x7129E7BA6A21BB0E, value, 128);
  } 
  public CParticleCollectionFloatInput ShellSize {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x7129E7BA04D01B22));
  }


}