// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_ContinuousEmitterImpl : CParticleFunctionEmitterImpl, C_OP_ContinuousEmitter {

  public C_OP_ContinuousEmitterImpl(nint handle) : base(handle) {
  }

  public CParticleCollectionFloatInput EmissionDuration {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x6B2A982090181C90));
  }
  public CParticleCollectionFloatInput StartTime {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x6B2A982067FE9DC4));
  }
  public CParticleCollectionFloatInput EmitRate {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x6B2A982062DC20CE));
  }
  public ref float EmissionScale {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6B2A982053003112));
  }
  public ref float ScalePerParentParticle {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6B2A98206A172D20));
  }
  public ref bool InitFromKilledParentParticles {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6B2A98204B2E40E9));
  }
  public ref EventTypeSelection_t EventType {
    get => ref _Handle.AsRef<EventTypeSelection_t>(Schema.GetOffset(0x6B2A9820E1F9AA93));
  }
  public ref int SnapshotControlPoint {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6B2A9820192638EC));
  }
  public string StrSnapshotSubset {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x6B2A9820BD8A8E5E));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x6B2A9820BD8A8E5E, value);
  } 
  public ref int LimitPerUpdate {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6B2A98204975B526));
  }
  public ref bool ForceEmitOnFirstUpdate {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6B2A98206532DDA9));
  }
  public ref bool ForceEmitOnLastUpdate {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6B2A98206498635F));
  }


}