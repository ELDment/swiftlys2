// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_PercentageBetweenTransformsImpl : CParticleFunctionOperatorImpl, C_OP_PercentageBetweenTransforms {

  public C_OP_PercentageBetweenTransformsImpl(nint handle) : base(handle) {
  }

  public ParticleAttributeIndex_t FieldOutput {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x37F3E6E6E5729606));
  }
  public ref float InputMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x37F3E6E6E88A0D0F));
  }
  public ref float InputMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x37F3E6E6D6766901));
  }
  public ref float OutputMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x37F3E6E65F8D7716));
  }
  public ref float OutputMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x37F3E6E651A0E8C4));
  }
  public CParticleTransformInput TransformStart {
    get => new CParticleTransformInputImpl(_Handle + Schema.GetOffset(0x37F3E6E6D94FA7F9));
  }
  public CParticleTransformInput TransformEnd {
    get => new CParticleTransformInputImpl(_Handle + Schema.GetOffset(0x37F3E6E60C3277C8));
  }
  public ref ParticleSetMethod_t SetMethod {
    get => ref _Handle.AsRef<ParticleSetMethod_t>(Schema.GetOffset(0x37F3E6E6FB53C31E));
  }
  public ref bool ActiveRange {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x37F3E6E63FA53B84));
  }
  public ref bool RadialCheck {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x37F3E6E6496187DE));
  }


}