// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CBaseGrenadeImpl : CBaseFlexImpl, CBaseGrenade {

  public CBaseGrenadeImpl(nint handle) : base(handle) {
  }

  public CEntityIOOutput OnPlayerPickup {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xB6ACD98FDE81BF25));
  }
  public CEntityIOOutput OnExplode {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xB6ACD98F5153ED85));
  }
  public ref bool HasWarnedAI {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xB6ACD98F52149340));
  }
  public ref bool IsSmokeGrenade {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xB6ACD98FD26F58DC));
  }
  public ref bool IsLive {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xB6ACD98F4DBE6B1F));
  }
  public ref float DmgRadius {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xB6ACD98FB9ADFB35));
  }
  public GameTime_t DetonateTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xB6ACD98F884102F2));
  }
  public ref float WarnAITime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xB6ACD98FFC4F4550));
  }
  public ref float Damage {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xB6ACD98FDC60E53E));
  }
  public string BounceSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xB6ACD98F060D1544));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xB6ACD98F060D1544, value);
  } 
  public string ExplosionSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xB6ACD98FEA1C20EF));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xB6ACD98FEA1C20EF, value);
  } 
  public ref CHandle<CCSPlayerPawn> Thrower {
    get => ref _Handle.AsRef<CHandle<CCSPlayerPawn>>(Schema.GetOffset(0xB6ACD98FC9CF8702));
  }
  public GameTime_t NextAttack {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xB6ACD98F3DFDCDEA));
  }
  public ref CHandle<CCSPlayerPawn> OriginalThrower {
    get => ref _Handle.AsRef<CHandle<CCSPlayerPawn>>(Schema.GetOffset(0xB6ACD98F34FD45A3));
  }

  public void IsLiveUpdated() {
    Schema.Update(_Handle, 0xB6ACD98F4DBE6B1F);
  }
  public void DmgRadiusUpdated() {
    Schema.Update(_Handle, 0xB6ACD98FB9ADFB35);
  }
  public void DetonateTimeUpdated() {
    Schema.Update(_Handle, 0xB6ACD98F884102F2);
  }
  public void DamageUpdated() {
    Schema.Update(_Handle, 0xB6ACD98FDC60E53E);
  }
  public void ThrowerUpdated() {
    Schema.Update(_Handle, 0xB6ACD98FC9CF8702);
  }
}