// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_VectorFieldSnapshotImpl : CParticleFunctionOperatorImpl, C_OP_VectorFieldSnapshot {

  public C_OP_VectorFieldSnapshotImpl(nint handle) : base(handle) {
  }

  public ref int ControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4679512A3F31A6BD));
  }
  public ParticleAttributeIndex_t AttributeToWrite {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x4679512A389A3CC1));
  }
  public ref int LocalSpaceCP {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4679512AC8E9CB31));
  }
  public CPerParticleFloatInput Interpolation {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0x4679512ACF55B987));
  }
  public CPerParticleVecInput Scale {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0x4679512A5F596B51));
  }
  public ref float BoundaryDampening {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4679512A6C557EF8));
  }
  public ref bool SetVelocity {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x4679512A996C0A34));
  }
  public ref bool LockToSurface {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x4679512A81E43C02));
  }
  public ref float GridSpacing {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4679512AB7D1BFB8));
  }


}