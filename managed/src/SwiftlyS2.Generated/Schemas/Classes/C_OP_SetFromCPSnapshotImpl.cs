// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_SetFromCPSnapshotImpl : CParticleFunctionOperatorImpl, C_OP_SetFromCPSnapshot {

  public C_OP_SetFromCPSnapshotImpl(nint handle) : base(handle) {
  }

  public ref int ControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x5B4435183F31A6BD));
  }
  public string StrSnapshotSubset {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x5B443518BD8A8E5E));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x5B443518BD8A8E5E, value);
  } 
  public ParticleAttributeIndex_t AttributeToRead {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x5B443518E0F61F9E));
  }
  public ParticleAttributeIndex_t AttributeToWrite {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x5B443518389A3CC1));
  }
  public ref int LocalSpaceCP {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x5B443518C8E9CB31));
  }
  public ref bool Random {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5B443518D13B9DC2));
  }
  public ref bool Reverse {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5B443518EA4E22E5));
  }
  public ref int RandomSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x5B4435186388F067));
  }
  public CParticleCollectionFloatInput SnapShotStartPoint {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x5B443518A7DF116B));
  }
  public CParticleCollectionFloatInput SnapShotIncrement {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x5B443518C1AED602));
  }
  public CPerParticleFloatInput Interpolation {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0x5B443518CF55B987));
  }
  public ref bool SubSample {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5B4435185021E837));
  }
  public ref bool Prev {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5B4435189E5B9F10));
  }


}