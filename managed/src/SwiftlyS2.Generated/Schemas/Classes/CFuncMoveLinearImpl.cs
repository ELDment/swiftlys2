// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CFuncMoveLinearImpl : CBaseToggleImpl, CFuncMoveLinear {

  public CFuncMoveLinearImpl(nint handle) : base(handle) {
  }

  public ref MoveLinearAuthoredPos_t AuthoredPosition {
    get => ref _Handle.AsRef<MoveLinearAuthoredPos_t>(Schema.GetOffset(0xDC0EE8941BF65B84));
  }
  public ref QAngle MoveEntitySpace {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0xDC0EE894325319F9));
  }
  public ref Vector MoveDirParentSpace {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xDC0EE894EC2120EF));
  }
  public string SoundStart {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC0EE894E2756078));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC0EE894E2756078, value);
  } 
  public string SoundStop {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC0EE894E9EADD9C));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC0EE894E9EADD9C, value);
  } 
  public string CurrentSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC0EE894C4F1FE51));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC0EE894C4F1FE51, value);
  } 
  public ref float BlockDamage {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xDC0EE894A5348091));
  }
  public ref float StartPosition {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xDC0EE894E34367EA));
  }
  public CEntityIOOutput OnFullyOpen {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xDC0EE89421733AE4));
  }
  public CEntityIOOutput OnFullyClosed {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xDC0EE89475470294));
  }
  public ref bool CreateMovableNavMesh {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC0EE89485442AAF));
  }
  public ref bool AllowMovableNavMeshDockingOnEntireEntity {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC0EE8940CC0563A));
  }
  public ref bool CreateNavObstacle {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC0EE8941849970B));
  }


}