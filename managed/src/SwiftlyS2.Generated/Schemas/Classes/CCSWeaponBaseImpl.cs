// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CCSWeaponBaseImpl : CBasePlayerWeaponImpl, CCSWeaponBase {

  public CCSWeaponBaseImpl(nint handle) : base(handle) {
  }

  public ref bool Removeable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA512A9A0EFD));
  }
  public ref bool PlayerAmmoStockOnPickup {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51D64BCF69));
  }
  public ref bool RequireUseToTouch {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51E52ED88D));
  }
  public ref WeaponGameplayAnimState WeaponGameplayAnimState {
    get => ref _Handle.AsRef<WeaponGameplayAnimState>(Schema.GetOffset(0x8102BA514CFB8FEA));
  }
  public GameTime_t WeaponGameplayAnimStateTimestamp {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51180F65AD));
  }
  public GameTime_t InspectCancelCompleteTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51A9C029E5));
  }
  public ref bool InspectPending {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51793FE8B6));
  }
  public ref bool InspectShouldLoop {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51CB0DE08A));
  }
  public ref int LastEmptySoundCmdNum {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA513E7E6941));
  }
  public ref bool FireOnEmpty {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA5172D822E5));
  }
  public CEntityIOOutput OnPlayerPickup {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x8102BA51DE81BF25));
  }
  public ref CSWeaponMode WeaponMode {
    get => ref _Handle.AsRef<CSWeaponMode>(Schema.GetOffset(0x8102BA51AA0E449E));
  }
  public ref float TurningInaccuracyDelta {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA51C32CA614));
  }
  public ref Vector TurningInaccuracyEyeDirLast {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x8102BA51294B9004));
  }
  public ref float TurningInaccuracy {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA51533B6902));
  }
  public ref float AccuracyPenalty {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA517FB6DE25));
  }
  public GameTime_t LastAccuracyUpdateTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA514B746ABE));
  }
  public ref float AccuracySmoothedForZoom {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA519B72CD81));
  }
  public ref int RecoilIndex {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA5191B65146));
  }
  public ref float RecoilIndex1 {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA51D779E87B));
  }
  public ref bool BurstMode {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA513016BB7E));
  }
  public GameTick_t PostponeFireReadyTicks {
    get => new GameTick_tImpl(_Handle + Schema.GetOffset(0x8102BA51EF9494E8));
  }
  public ref float PostponeFireReadyFrac {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA51DC2054DC));
  }
  public ref bool InReload {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51184F0553));
  }
  public GameTime_t DroppedAtTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51C3A8936F));
  }
  public ref bool IsHauledBack {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51D8C240B9));
  }
  public ref bool SilencerOn {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA5168D3A353));
  }
  public GameTime_t TimeSilencerSwitchComplete {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51DCB190FA));
  }
  public ref int OriginalTeamNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA515DB51597));
  }
  public ref int MostRecentTeamNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA51D818821C));
  }
  public ref bool DroppedNearBuyZone {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA511DC5989F));
  }
  public ref float NextAttackRenderTimeOffset {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA518D5552CC));
  }
  public ref bool CanBePickedUp {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51BC5DCE9D));
  }
  public ref bool UseCanOverrideNextOwnerTouchTime {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA515AD674E8));
  }
  public GameTime_t NextOwnerTouchTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51FECB784F));
  }
  public GameTime_t NextPrevOwnerTouchTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA515C688482));
  }
  public GameTime_t NextPrevOwnerUseTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51C84F06AE));
  }
  public ref CHandle<CCSPlayerPawn> PrevOwner {
    get => ref _Handle.AsRef<CHandle<CCSPlayerPawn>>(Schema.GetOffset(0x8102BA5133F3C84D));
  }
  public GameTick_t DropTick {
    get => new GameTick_tImpl(_Handle + Schema.GetOffset(0x8102BA51B2FC22F5));
  }
  public ref bool WasActiveWeaponWhenDropped {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA51E6BC2F96));
  }
  public ref bool Donated {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA516864DC4A));
  }
  public GameTime_t LastShotTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA517A37978C));
  }
  public ref bool WasOwnedByCT {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA5102E58E01));
  }
  public ref bool WasOwnedByTerrorist {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x8102BA517A3CE544));
  }
  public ref int NumRemoveUnownedWeaponThink {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA51F8C16A23));
  }
  public CIronSightController IronSightController {
    get => new CIronSightControllerImpl(_Handle + Schema.GetOffset(0x8102BA5189739F40));
  }
  public ref int IronSightMode {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x8102BA51AAF66648));
  }
  public GameTime_t LastLOSTraceFailureTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA51EFA6E48B));
  }
  public ref float WatTickOffset {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x8102BA519F5B6237));
  }
  public GameTime_t LastShakeTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x8102BA517BD64C62));
  }

  public void WeaponGameplayAnimStateUpdated() {
    Schema.Update(_Handle, 0x8102BA514CFB8FEA);
  }
  public void WeaponGameplayAnimStateTimestampUpdated() {
    Schema.Update(_Handle, 0x8102BA51180F65AD);
  }
  public void InspectCancelCompleteTimeUpdated() {
    Schema.Update(_Handle, 0x8102BA51A9C029E5);
  }
  public void InspectPendingUpdated() {
    Schema.Update(_Handle, 0x8102BA51793FE8B6);
  }
  public void InspectShouldLoopUpdated() {
    Schema.Update(_Handle, 0x8102BA51CB0DE08A);
  }
  public void WeaponModeUpdated() {
    Schema.Update(_Handle, 0x8102BA51AA0E449E);
  }
  public void AccuracyPenaltyUpdated() {
    Schema.Update(_Handle, 0x8102BA517FB6DE25);
  }
  public void RecoilIndexUpdated() {
    Schema.Update(_Handle, 0x8102BA5191B65146);
  }
  public void RecoilIndex1Updated() {
    Schema.Update(_Handle, 0x8102BA51D779E87B);
  }
  public void BurstModeUpdated() {
    Schema.Update(_Handle, 0x8102BA513016BB7E);
  }
  public void PostponeFireReadyTicksUpdated() {
    Schema.Update(_Handle, 0x8102BA51EF9494E8);
  }
  public void PostponeFireReadyFracUpdated() {
    Schema.Update(_Handle, 0x8102BA51DC2054DC);
  }
  public void InReloadUpdated() {
    Schema.Update(_Handle, 0x8102BA51184F0553);
  }
  public void DroppedAtTimeUpdated() {
    Schema.Update(_Handle, 0x8102BA51C3A8936F);
  }
  public void IsHauledBackUpdated() {
    Schema.Update(_Handle, 0x8102BA51D8C240B9);
  }
  public void SilencerOnUpdated() {
    Schema.Update(_Handle, 0x8102BA5168D3A353);
  }
  public void TimeSilencerSwitchCompleteUpdated() {
    Schema.Update(_Handle, 0x8102BA51DCB190FA);
  }
  public void OriginalTeamNumberUpdated() {
    Schema.Update(_Handle, 0x8102BA515DB51597);
  }
  public void MostRecentTeamNumberUpdated() {
    Schema.Update(_Handle, 0x8102BA51D818821C);
  }
  public void DroppedNearBuyZoneUpdated() {
    Schema.Update(_Handle, 0x8102BA511DC5989F);
  }
  public void NextPrevOwnerUseTimeUpdated() {
    Schema.Update(_Handle, 0x8102BA51C84F06AE);
  }
  public void PrevOwnerUpdated() {
    Schema.Update(_Handle, 0x8102BA5133F3C84D);
  }
  public void DropTickUpdated() {
    Schema.Update(_Handle, 0x8102BA51B2FC22F5);
  }
  public void WasActiveWeaponWhenDroppedUpdated() {
    Schema.Update(_Handle, 0x8102BA51E6BC2F96);
  }
  public void LastShotTimeUpdated() {
    Schema.Update(_Handle, 0x8102BA517A37978C);
  }
  public void IronSightModeUpdated() {
    Schema.Update(_Handle, 0x8102BA51AAF66648);
  }
  public void WatTickOffsetUpdated() {
    Schema.Update(_Handle, 0x8102BA519F5B6237);
  }
  public void LastShakeTimeUpdated() {
    Schema.Update(_Handle, 0x8102BA517BD64C62);
  }
}