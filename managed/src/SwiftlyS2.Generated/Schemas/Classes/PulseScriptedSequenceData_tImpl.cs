// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class PulseScriptedSequenceData_tImpl : SchemaClass, PulseScriptedSequenceData_t {

  public PulseScriptedSequenceData_tImpl(nint handle) : base(handle) {
  }

  public ref int ActorID {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x7C7814728383E163));
  }
  public string PreIdleSequence {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7C781472672B317E));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7C781472672B317E, value);
  } 
  public string EntrySequence {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7C7814722635E511));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7C7814722635E511, value);
  } 
  public string Sequence {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7C78147209FFA3B5));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7C78147209FFA3B5, value);
  } 
  public string ExitSequence {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x7C7814725F482845));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x7C7814725F482845, value);
  } 
  public ref ScriptedMoveTo_t MoveTo {
    get => ref _Handle.AsRef<ScriptedMoveTo_t>(Schema.GetOffset(0x7C781472A9282EB9));
  }
  public ref SharedMovementGait_t MoveToGait {
    get => ref _Handle.AsRef<SharedMovementGait_t>(Schema.GetOffset(0x7C7814721217E084));
  }
  public ref ScriptedHeldWeaponBehavior_t HeldWeaponBehavior {
    get => ref _Handle.AsRef<ScriptedHeldWeaponBehavior_t>(Schema.GetOffset(0x7C781472D545A524));
  }
  public ref bool LoopPreIdleSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7C7814728649E65F));
  }
  public ref bool LoopActionSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7C78147242C7CFA4));
  }
  public ref bool LoopPostIdleSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7C781472C17036CA));
  }
  public ref bool IgnoreLookAt {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x7C781472ECC380B5));
  }


}