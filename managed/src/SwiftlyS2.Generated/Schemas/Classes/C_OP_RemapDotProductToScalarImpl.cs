// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_RemapDotProductToScalarImpl : CParticleFunctionOperatorImpl, C_OP_RemapDotProductToScalar {

  public C_OP_RemapDotProductToScalarImpl(nint handle) : base(handle) {
  }

  public ref int InputCP1 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x56A85935A0CCAE3F));
  }
  public ref int InputCP2 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x56A85935A1CCAFD2));
  }
  public ParticleAttributeIndex_t FieldOutput {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x56A85935E5729606));
  }
  public ref float InputMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x56A85935E88A0D0F));
  }
  public ref float InputMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x56A85935D6766901));
  }
  public ref float OutputMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x56A859355F8D7716));
  }
  public ref float OutputMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x56A8593551A0E8C4));
  }
  public ref bool UseParticleVelocity {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x56A85935412A8335));
  }
  public ref ParticleSetMethod_t SetMethod {
    get => ref _Handle.AsRef<ParticleSetMethod_t>(Schema.GetOffset(0x56A85935FB53C31E));
  }
  public ref bool ActiveRange {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x56A859353FA53B84));
  }
  public ref bool UseParticleNormal {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x56A859353FBCD9B5));
  }


}