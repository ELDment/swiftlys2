// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CBaseTriggerImpl : CBaseToggleImpl, CBaseTrigger {

  public CBaseTriggerImpl(nint handle) : base(handle) {
  }

  public CEntityIOOutput OnStartTouch {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B1B4E38193));
  }
  public CEntityIOOutput OnStartTouchAll {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B1BE1133C6));
  }
  public CEntityIOOutput OnEndTouch {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B15D181B48));
  }
  public CEntityIOOutput OnEndTouchAll {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B1A5526E0B));
  }
  public CEntityIOOutput OnTouching {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B1CD69EB01));
  }
  public CEntityIOOutput OnTouchingEachEntity {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B1CBC29227));
  }
  public CEntityIOOutput OnNotTouching {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x96DE10B19603AF34));
  }
  public ref CUtlVector<CHandle<CBaseEntity>> TouchingEntities {
    get => ref _Handle.AsRef<CUtlVector<CHandle<CBaseEntity>>>(Schema.GetOffset(0x96DE10B1070A5E2D));
  }
  public ref CUtlSymbolLarge FilterName {
    get => ref _Handle.AsRef<CUtlSymbolLarge>(Schema.GetOffset(0x96DE10B109C86445));
  }
  public ref CHandle<CBaseFilter> Filter {
    get => ref _Handle.AsRef<CHandle<CBaseFilter>>(Schema.GetOffset(0x96DE10B145D9E0B1));
  }
  public ref bool Disabled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x96DE10B13A7C5965));
  }
  public ref bool UseAsyncQueries {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x96DE10B1DDD8EB18));
  }

  public void DisabledUpdated() {
    Schema.Update(_Handle, 0x96DE10B13A7C5965);
  }
}