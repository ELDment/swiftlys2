// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CBaseFlexImpl : CBaseAnimGraphImpl, CBaseFlex {

  public CBaseFlexImpl(nint handle) : base(handle) {
  }

  public ref CUtlVector<float> FlexWeight {
    get => ref _Handle.AsRef<CUtlVector<float>>(Schema.GetOffset(0xEE4FEF48AB868EDA));
  }
  public ref Vector LookTargetPosition {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xEE4FEF480DCD7B00));
  }
  public ref bool Blinktoggle {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEE4FEF48CA230309));
  }
  public GameTime_t AllowResponsesEndTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xEE4FEF4858EB0248));
  }
  public GameTime_t LastFlexAnimationTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xEE4FEF48D5ADEDFF));
  }
  public SceneEventId_t NextSceneEventId {
    get => new SceneEventId_tImpl(_Handle + Schema.GetOffset(0xEE4FEF483756F461));
  }
  public ref bool UpdateLayerPriorities {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEE4FEF48446AC3B9));
  }

  public void FlexWeightUpdated() {
    Schema.Update(_Handle, 0xEE4FEF48AB868EDA);
  }
  public void LookTargetPositionUpdated() {
    Schema.Update(_Handle, 0xEE4FEF480DCD7B00);
  }
  public void BlinktoggleUpdated() {
    Schema.Update(_Handle, 0xEE4FEF48CA230309);
  }
}