// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPostProcessingVolumeImpl : CBaseTriggerImpl, CPostProcessingVolume {

  public CPostProcessingVolumeImpl(nint handle) : base(handle) {
  }

  public ref CStrongHandle<InfoForResourceTypeCPostProcessingResource> PostSettings {
    get => ref _Handle.AsRef<CStrongHandle<InfoForResourceTypeCPostProcessingResource>>(Schema.GetOffset(0x5DBC28C1D2EB75A4));
  }
  public ref float FadeDuration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C1C4E6DEE1));
  }
  public ref float MinLogExposure {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C17457F7D0));
  }
  public ref float MaxLogExposure {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C1DC5D3ED6));
  }
  public ref float MinExposure {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C122FAB634));
  }
  public ref float MaxExposure {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C15D4951D6));
  }
  public ref float ExposureCompensation {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C16EC15498));
  }
  public ref float ExposureFadeSpeedUp {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C19789BBB6));
  }
  public ref float ExposureFadeSpeedDown {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C154685D1F));
  }
  public ref float TonemapEVSmoothingRange {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x5DBC28C19C2546CB));
  }
  public ref bool Master {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5DBC28C15AFF9193));
  }
  public ref bool ExposureControl {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x5DBC28C12C195925));
  }

  public void PostSettingsUpdated() {
    Schema.Update(_Handle, 0x5DBC28C1D2EB75A4);
  }
  public void FadeDurationUpdated() {
    Schema.Update(_Handle, 0x5DBC28C1C4E6DEE1);
  }
  public void MinLogExposureUpdated() {
    Schema.Update(_Handle, 0x5DBC28C17457F7D0);
  }
  public void MaxLogExposureUpdated() {
    Schema.Update(_Handle, 0x5DBC28C1DC5D3ED6);
  }
  public void MinExposureUpdated() {
    Schema.Update(_Handle, 0x5DBC28C122FAB634);
  }
  public void MaxExposureUpdated() {
    Schema.Update(_Handle, 0x5DBC28C15D4951D6);
  }
  public void ExposureCompensationUpdated() {
    Schema.Update(_Handle, 0x5DBC28C16EC15498);
  }
  public void ExposureFadeSpeedUpUpdated() {
    Schema.Update(_Handle, 0x5DBC28C19789BBB6);
  }
  public void ExposureFadeSpeedDownUpdated() {
    Schema.Update(_Handle, 0x5DBC28C154685D1F);
  }
  public void TonemapEVSmoothingRangeUpdated() {
    Schema.Update(_Handle, 0x5DBC28C19C2546CB);
  }
  public void MasterUpdated() {
    Schema.Update(_Handle, 0x5DBC28C15AFF9193);
  }
  public void ExposureControlUpdated() {
    Schema.Update(_Handle, 0x5DBC28C12C195925);
  }
}