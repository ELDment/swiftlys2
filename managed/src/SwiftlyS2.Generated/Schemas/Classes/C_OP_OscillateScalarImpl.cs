// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_OscillateScalarImpl : CParticleFunctionOperatorImpl, C_OP_OscillateScalar {

  public C_OP_OscillateScalarImpl(nint handle) : base(handle) {
  }

  public ref float RateMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A5645AF561));
  }
  public ref float RateMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A5566E670F));
  }
  public ref float FrequencyMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A531C7331B));
  }
  public ref float FrequencyMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A527B39BA5));
  }
  public ParticleAttributeIndex_t Field {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0x92E728A5C257B93B));
  }
  public ref bool Proportional {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x92E728A5891F328A));
  }
  public ref bool ProportionalOp {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x92E728A50F8832BD));
  }
  public ref float StartTime_min {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A55AC75BFB));
  }
  public ref float StartTime_max {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A550B23185));
  }
  public ref float EndTime_min {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A57B891932));
  }
  public ref float EndTime_max {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A58575A138));
  }
  public ref float OscMult {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A516278E94));
  }
  public ref float OscAdd {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x92E728A57B38A63D));
  }


}