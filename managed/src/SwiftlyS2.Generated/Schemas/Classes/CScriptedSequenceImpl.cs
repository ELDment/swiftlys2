// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CScriptedSequenceImpl : CBaseEntityImpl, CScriptedSequence {

  public CScriptedSequenceImpl(nint handle) : base(handle) {
  }

  public string Entry {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45EDE900465B));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45EDE900465B, value);
  } 
  public string PreIdle {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45EDF21548B8));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45EDF21548B8, value);
  } 
  public string Play {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45ED387C901B));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45ED387C901B, value);
  } 
  public string PostIdle {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45EDD456723D));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45EDD456723D, value);
  } 
  public string ModifierToAddOnPlay {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45ED4B56AE97));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45ED4B56AE97, value);
  } 
  public string NextScript {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45ED484B7743));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45ED484B7743, value);
  } 
  public string Entity {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45ED71B7E842));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45ED71B7E842, value);
  } 
  public string SyncGroup {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xBB0C45ED943A51A5));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xBB0C45ED943A51A5, value);
  } 
  public ref ScriptedMoveTo_t MoveTo {
    get => ref _Handle.AsRef<ScriptedMoveTo_t>(Schema.GetOffset(0xBB0C45EDA9282EB9));
  }
  public ref SharedMovementGait_t MoveToGait {
    get => ref _Handle.AsRef<SharedMovementGait_t>(Schema.GetOffset(0xBB0C45ED1217E084));
  }
  public ref ScriptedHeldWeaponBehavior_t HeldWeaponBehavior {
    get => ref _Handle.AsRef<ScriptedHeldWeaponBehavior_t>(Schema.GetOffset(0xBB0C45EDD545A524));
  }
  public ref ForcedCrouchState_t ForcedCrouchState {
    get => ref _Handle.AsRef<ForcedCrouchState_t>(Schema.GetOffset(0xBB0C45ED71B1ABC7));
  }
  public ref bool IsPlayingPreIdle {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDA6E93B90));
  }
  public ref bool IsPlayingEntry {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED678DEF53));
  }
  public ref bool IsPlayingAction {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED74CACBBF));
  }
  public ref bool IsPlayingPostIdle {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDF12D82B5));
  }
  public ref bool DontRotateOther {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDAF76EBED));
  }
  public ref bool IsRepeatable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED779D5E9E));
  }
  public ref bool ShouldLeaveCorpse {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED081B19B9));
  }
  public ref bool StartOnSpawn {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDDB2E6401));
  }
  public ref bool DisallowInterrupts {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED939D3840));
  }
  public ref bool CanOverrideNPCState {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED5DE829CD));
  }
  public ref bool DontTeleportAtEnd {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED59E02641));
  }
  public ref bool HighPriority {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED6207C781));
  }
  public ref bool HideDebugComplaints {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDB3CC8816));
  }
  public ref bool ContinueOnDeath {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED0BF71FD5));
  }
  public ref bool LoopPreIdleSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED8649E65F));
  }
  public ref bool LoopActionSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED42C7CFA4));
  }
  public ref bool LoopPostIdleSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDC17036CA));
  }
  public ref bool SynchPostIdles {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDA62A28BB));
  }
  public ref bool IgnoreLookAt {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDECC380B5));
  }
  public ref bool IgnoreGravity {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED2195C43B));
  }
  public ref bool DisableNPCCollisions {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED13A48FA3));
  }
  public ref bool KeepAnimgraphLockedPost {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDC663447B));
  }
  public ref bool DontAddModifiers {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDC5EF5CF1));
  }
  public ref bool DisableAimingWhileMoving {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED58207B6F));
  }
  public ref bool IgnoreRotation {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDC7A0F33D));
  }
  public ref float Radius {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED5ACFC08D));
  }
  public ref float Repeat {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED25029808));
  }
  public ref float PlayAnimFadeInTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED9547EBE8));
  }
  public ref float MoveInterpTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED642EF5C5));
  }
  public ref float AngRate {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED25A03D83));
  }
  public ref float MoveSpeed {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xBB0C45ED66D18279));
  }
  public ref bool WaitUntilMoveCompletesToStartAnimation {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED56798D2C));
  }
  public ref int NotReadySequenceCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBB0C45ED75F15197));
  }
  public GameTime_t StartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xBB0C45ED6330E7EE));
  }
  public ref bool WaitForBeginSequence {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED5878D3AD));
  }
  public ref int Saved_effects {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBB0C45ED1E53C9F1));
  }
  public ref int SavedFlags {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBB0C45ED80756D77));
  }
  public ref int SavedCollisionGroup {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBB0C45ED6A94000F));
  }
  public ref bool Interruptable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED58175B38));
  }
  public ref bool SequenceStarted {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED8F0ADD05));
  }
  public ref bool PositionRelativeToOtherEntity {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED8CBF8E64));
  }
  public ref CHandle<CBaseEntity> TargetEnt {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0xBB0C45ED2DD292D7));
  }
  public ref CHandle<CScriptedSequence> NextCine {
    get => ref _Handle.AsRef<CHandle<CScriptedSequence>>(Schema.GetOffset(0xBB0C45ED75574CC3));
  }
  public ref bool Thinking {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED2C33DE1D));
  }
  public ref bool InitiatedSelfDelete {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED0396E447));
  }
  public ref bool IsTeleportingDueToMoveTo {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDDBC06EE1));
  }
  public ref bool AllowCustomInterruptConditions {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDA2069736));
  }
  public ref CHandle<CBaseAnimGraph> ForcedTarget {
    get => ref _Handle.AsRef<CHandle<CBaseAnimGraph>>(Schema.GetOffset(0xBB0C45ED820DE873));
  }
  public ref bool DontCancelOtherSequences {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDF5CD3DDC));
  }
  public ref bool ForceSynch {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED088C39BD));
  }
  public ref bool PreventUpdateYawOnFinish {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDFA160855));
  }
  public ref bool EnsureOnNavmeshOnFinish {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45ED802BA0B0));
  }
  public ref ScriptedOnDeath_t OnDeathBehavior {
    get => ref _Handle.AsRef<ScriptedOnDeath_t>(Schema.GetOffset(0xBB0C45EDC66B3E44));
  }
  public ref ScriptedConflictResponse_t ConflictResponse {
    get => ref _Handle.AsRef<ScriptedConflictResponse_t>(Schema.GetOffset(0xBB0C45EDF6B5D53C));
  }
  public CEntityIOOutput OnBeginSequence {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED4EFCFF18));
  }
  public CEntityIOOutput OnActionStartOrLoop {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED709BE9C5));
  }
  public CEntityIOOutput OnEndSequence {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED1F7AD018));
  }
  public CEntityIOOutput OnPostIdleEndSequence {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED7770824C));
  }
  public CEntityIOOutput OnCancelSequence {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED3DF39D63));
  }
  public CEntityIOOutput OnCancelFailedSequence {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0xBB0C45ED1885A91A));
  }
  public SchemaUntypedField OnScriptEvent {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0xBB0C45ED8A68F621));
  }
  public ref CTransform MatOtherToMain {
    get => ref _Handle.AsRef<CTransform>(Schema.GetOffset(0xBB0C45ED0E394D39));
  }
  public ref CHandle<CBaseEntity> InteractionMainEntity {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0xBB0C45ED16430DA3));
  }
  public ref int PlayerDeathBehavior {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xBB0C45EDC6ECC93B));
  }
  public ref bool SkipFadeIn {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xBB0C45EDD482183B));
  }


}