// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class VPhysXConstraintParams_tImpl : SchemaClass, VPhysXConstraintParams_t {

  public VPhysXConstraintParams_tImpl(nint handle) : base(handle) {
  }

  public ref byte Type {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0xF2BDF6AD18853D59));
  }
  public ref byte TranslateMotion {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0xF2BDF6AD2A710A0B));
  }
  public ref byte RotateMotion {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0xF2BDF6AD5EF89394));
  }
  public ref byte Flags {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0xF2BDF6ADCE6E9C28));
  }
public ISchemaFixedArray<Vector> Anchor {
    get => new SchemaFixedArray<Vector>(_Handle, 0xF2BDF6AD23E10E54, 2, 12, 4);
  }
  public SchemaUntypedField Axes {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0xF2BDF6AD23115F58));
  }
  public ref float MaxForce {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADFA9D37B8));
  }
  public ref float MaxTorque {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD7880BF37));
  }
  public ref float LinearLimitValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADB813ABE0));
  }
  public ref float LinearLimitRestitution {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD4EB00271));
  }
  public ref float LinearLimitSpring {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADD69EE39A));
  }
  public ref float LinearLimitDamping {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD0F807887));
  }
  public ref float TwistLowLimitValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD2D2A931E));
  }
  public ref float TwistLowLimitRestitution {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD58A6205B));
  }
  public ref float TwistLowLimitSpring {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADFD3EA378));
  }
  public ref float TwistLowLimitDamping {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD1C805229));
  }
  public ref float TwistHighLimitValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADE29F5844));
  }
  public ref float TwistHighLimitRestitution {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD6CDC5C9D));
  }
  public ref float TwistHighLimitSpring {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD572B2446));
  }
  public ref float TwistHighLimitDamping {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADA25A11AB));
  }
  public ref float Swing1LimitValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD895D1418));
  }
  public ref float Swing1LimitRestitution {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADEB0D3459));
  }
  public ref float Swing1LimitSpring {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADE1EEAF92));
  }
  public ref float Swing1LimitDamping {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD610E7A3F));
  }
  public ref float Swing2LimitValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD09643191));
  }
  public ref float Swing2LimitRestitution {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADFA0A151C));
  }
  public ref float Swing2LimitSpring {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD9258456D));
  }
  public ref float Swing2LimitDamping {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD80E51186));
  }
  public ref Vector GoalPosition {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xF2BDF6AD02ACD9A1));
  }
  public SchemaUntypedField GoalOrientation {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0xF2BDF6ADA64626A8));
  }
  public ref Vector GoalAngularVelocity {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xF2BDF6AD3FA6751F));
  }
  public ref float DriveSpringX {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADC4001382));
  }
  public ref float DriveSpringY {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADC5001515));
  }
  public ref float DriveSpringZ {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADC200105C));
  }
  public ref float DriveDampingX {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD65958311));
  }
  public ref float DriveDampingY {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD6495817E));
  }
  public ref float DriveDampingZ {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD63957FEB));
  }
  public ref float DriveSpringTwist {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD779F67D1));
  }
  public ref float DriveSpringSwing {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADE2653378));
  }
  public ref float DriveSpringSlerp {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD8422D78E));
  }
  public ref float DriveDampingTwist {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD013F8FEA));
  }
  public ref float DriveDampingSwing {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD948D0F6B));
  }
  public ref float DriveDampingSlerp {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6ADDDD15859));
  }
  public ref int SolverIterationCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xF2BDF6ADCB9C71C4));
  }
  public ref float ProjectionLinearTolerance {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD644662E4));
  }
  public ref float ProjectionAngularTolerance {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xF2BDF6AD95309A51));
  }


}