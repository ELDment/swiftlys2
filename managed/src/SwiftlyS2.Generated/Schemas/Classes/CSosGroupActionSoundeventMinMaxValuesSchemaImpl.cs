// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CSosGroupActionSoundeventMinMaxValuesSchemaImpl : CSosGroupActionSchemaImpl, CSosGroupActionSoundeventMinMaxValuesSchema {

  public CSosGroupActionSoundeventMinMaxValuesSchemaImpl(nint handle) : base(handle) {
  }

  public string StrQueryPublicFieldName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC3C5E1C40839714));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC3C5E1C40839714, value);
  } 
  public string StrDelayPublicFieldName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC3C5E1CC2E1170D));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC3C5E1CC2E1170D, value);
  } 
  public ref bool ExcludeStoppedSounds {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC3C5E1C1BDF6FB6));
  }
  public ref bool ExcludeDelayedSounds {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC3C5E1CA849B37D));
  }
  public ref bool ExcludeSoundsBelowThreshold {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC3C5E1CBEF10829));
  }
  public ref float ExcludeSoundsMinThresholdValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xDC3C5E1CBAF64DF9));
  }
  public ref bool ExcludSoundsAboveThreshold {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xDC3C5E1CBD2BDEAE));
  }
  public ref float ExcludeSoundsMaxThresholdValue {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xDC3C5E1C67D717C7));
  }
  public string StrMinValueName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC3C5E1CCF654B06));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC3C5E1CCF654B06, value);
  } 
  public string StrMaxValueName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xDC3C5E1CEF3A2D5C));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0xDC3C5E1CEF3A2D5C, value);
  } 


}