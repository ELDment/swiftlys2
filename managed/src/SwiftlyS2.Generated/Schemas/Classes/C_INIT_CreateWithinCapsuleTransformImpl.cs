// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_INIT_CreateWithinCapsuleTransformImpl : CParticleFunctionInitializerImpl, C_INIT_CreateWithinCapsuleTransform {

  public C_INIT_CreateWithinCapsuleTransformImpl(nint handle) : base(handle) {
  }

  public CPerParticleFloatInput RadiusMin {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC088DBA85AD00941));
  }
  public CPerParticleFloatInput RadiusMax {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC088DBA84CE37AEF));
  }
  public CPerParticleFloatInput Height {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC088DBA86631D40E));
  }
  public CParticleTransformInput TransformInput {
    get => new CParticleTransformInputImpl(_Handle + Schema.GetOffset(0xC088DBA8B3FDC289));
  }
  public CPerParticleFloatInput SpeedMin {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC088DBA8B989E1F8));
  }
  public CPerParticleFloatInput SpeedMax {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xC088DBA8CF9D8C52));
  }
  public ref float SpeedRandExp {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xC088DBA83303A1AA));
  }
  public CPerParticleVecInput LocalCoordinateSystemSpeedMin {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0xC088DBA8A4A0F1AE));
  }
  public CPerParticleVecInput LocalCoordinateSystemSpeedMax {
    get => new CPerParticleVecInputImpl(_Handle + Schema.GetOffset(0xC088DBA8968D53EC));
  }
  public ParticleAttributeIndex_t FieldOutput {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC088DBA8E5729606));
  }
  public ParticleAttributeIndex_t FieldVelocity {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xC088DBA8852EBFAC));
  }


}