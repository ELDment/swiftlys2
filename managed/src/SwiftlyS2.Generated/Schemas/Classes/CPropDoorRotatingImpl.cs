// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPropDoorRotatingImpl : CBasePropDoorImpl, CPropDoorRotating {

  public CPropDoorRotatingImpl(nint handle) : base(handle) {
  }

  public ref Vector Axis {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x289EB6130AF9CE54));
  }
  public ref float Distance {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x289EB61300DC4A68));
  }
  public ref PropDoorRotatingSpawnPos_t SpawnPosition {
    get => ref _Handle.AsRef<PropDoorRotatingSpawnPos_t>(Schema.GetOffset(0x289EB613F5AD878C));
  }
  public ref PropDoorRotatingOpenDirection_e OpenDirection {
    get => ref _Handle.AsRef<PropDoorRotatingOpenDirection_e>(Schema.GetOffset(0x289EB6134BC74739));
  }
  public ref PropDoorRotatingOpenDirection_e CurrentOpenDirection {
    get => ref _Handle.AsRef<PropDoorRotatingOpenDirection_e>(Schema.GetOffset(0x289EB6132BAD86EE));
  }
  public ref float AjarAngle {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x289EB613CD456612));
  }
  public ref QAngle RotationAjarDeprecated {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x289EB6136AD5E768));
  }
  public ref QAngle RotationClosed {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x289EB6132A6472ED));
  }
  public ref QAngle RotationOpenForward {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x289EB6138F861A3E));
  }
  public ref QAngle RotationOpenBack {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x289EB61329E9297E));
  }
  public ref QAngle Goal {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x289EB6134D6AB03C));
  }
  public ref Vector ForwardBoundsMin {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x289EB6138A35433D));
  }
  public ref Vector ForwardBoundsMax {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x289EB61394203843));
  }
  public ref Vector BackBoundsMin {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x289EB6136FC138A5));
  }
  public ref Vector BackBoundsMax {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x289EB61379D4D01B));
  }
  public ref bool AjarDoorShouldntAlwaysOpen {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x289EB6138B1717E1));
  }
  public ref CHandle<CEntityBlocker> EntityBlocker {
    get => ref _Handle.AsRef<CHandle<CEntityBlocker>>(Schema.GetOffset(0x289EB6139318939A));
  }


}