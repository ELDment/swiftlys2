// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CParticleFunctionImpl : SchemaClass, CParticleFunction {

  public CParticleFunctionImpl(nint handle) : base(handle) {
  }

  public CParticleCollectionFloatInput OpStrength {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0x4E0CACB41DD56291));
  }
  public ref ParticleEndcapMode_t OpEndCapState {
    get => ref _Handle.AsRef<ParticleEndcapMode_t>(Schema.GetOffset(0x4E0CACB45CC37252));
  }
  public ref float OpStartFadeInTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB419F734B4));
  }
  public ref float OpEndFadeInTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB4ACF7C409));
  }
  public ref float OpStartFadeOutTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB4708F42B7));
  }
  public ref float OpEndFadeOutTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB451633BD4));
  }
  public ref float OpFadeOscillatePeriod {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB441341EE1));
  }
  public ref bool NormalizeToStopTime {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x4E0CACB42195F2E4));
  }
  public ref float OpTimeOffsetMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB4D764CFA2));
  }
  public ref float OpTimeOffsetMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB4C1512548));
  }
  public ref int OpTimeOffsetSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4E0CACB4EB255BD9));
  }
  public ref int OpTimeScaleSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4E0CACB43A25FF8A));
  }
  public ref float OpTimeScaleMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB44A95534F));
  }
  public ref float OpTimeScaleMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E0CACB43881AF41));
  }
  public ref bool DisableOperator {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x4E0CACB49F141CC3));
  }
  public string Notes {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x4E0CACB41DD3144A));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x4E0CACB41DD3144A, value);
  } 


}