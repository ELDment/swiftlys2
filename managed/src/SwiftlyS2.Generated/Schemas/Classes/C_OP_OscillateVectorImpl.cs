// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_OscillateVectorImpl : CParticleFunctionOperatorImpl, C_OP_OscillateVector {

  public C_OP_OscillateVectorImpl(nint handle) : base(handle) {
  }

  public ref Vector RateMin {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xEECAE90A645AF561));
  }
  public ref Vector RateMax {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xEECAE90A566E670F));
  }
  public ref Vector FrequencyMin {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xEECAE90A31C7331B));
  }
  public ref Vector FrequencyMax {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0xEECAE90A27B39BA5));
  }
  public ParticleAttributeIndex_t Field {
    get => new ParticleAttributeIndex_tImpl(_Handle + Schema.GetOffset(0xEECAE90AC257B93B));
  }
  public ref bool Proportional {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEECAE90A891F328A));
  }
  public ref bool ProportionalOp {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEECAE90A0F8832BD));
  }
  public ref bool Offset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEECAE90A17412B2A));
  }
  public ref float StartTime_min {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEECAE90A5AC75BFB));
  }
  public ref float StartTime_max {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEECAE90A50B23185));
  }
  public ref float EndTime_min {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEECAE90A7B891932));
  }
  public ref float EndTime_max {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEECAE90A8575A138));
  }
  public CPerParticleFloatInput OscMult {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xEECAE90A16278E94));
  }
  public CPerParticleFloatInput OscAdd {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xEECAE90A7B38A63D));
  }
  public CPerParticleFloatInput RateScale {
    get => new CPerParticleFloatInputImpl(_Handle + Schema.GetOffset(0xEECAE90A58CBF9C1));
  }


}