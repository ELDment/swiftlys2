// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_INIT_PositionWarpImpl : CParticleFunctionInitializerImpl, C_INIT_PositionWarp {

  public C_INIT_PositionWarpImpl(nint handle) : base(handle) {
  }

  public CParticleCollectionVecInput WarpMin {
    get => new CParticleCollectionVecInputImpl(_Handle + Schema.GetOffset(0x15BDD34F1B8A7F09));
  }
  public CParticleCollectionVecInput WarpMax {
    get => new CParticleCollectionVecInputImpl(_Handle + Schema.GetOffset(0x15BDD34F0D76E147));
  }
  public ref int ScaleControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x15BDD34F9A649261));
  }
  public ref int ControlPointNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x15BDD34F3F31A6BD));
  }
  public ref int RadiusComponent {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x15BDD34FFBFE904A));
  }
  public ref float WarpTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x15BDD34F34CDAE88));
  }
  public ref float WarpStartTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x15BDD34F4326267A));
  }
  public ref float PrevPosScale {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x15BDD34F46CED122));
  }
  public ref bool InvertWarp {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x15BDD34F67E23133));
  }
  public ref bool UseCount {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x15BDD34F8836B9AB));
  }


}