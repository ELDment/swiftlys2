// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CPhysBoxImpl : CBreakableImpl, CPhysBox {

  public CPhysBoxImpl(nint handle) : base(handle) {
  }

  public ref int DamageType {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x914B502B17488B28));
  }
  public ref int DamageToEnableMotion {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x914B502B6A217278));
  }
  public ref float ForceToEnableMotion {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x914B502B95BEED1A));
  }
  public ref Vector HoverPosePosition {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x914B502BE70418E3));
  }
  public ref QAngle HoverPoseAngles {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x914B502B086A1BC6));
  }
  public ref bool NotSolidToWorld {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x914B502B13A06DE8));
  }
  public ref bool EnableUseOutput {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x914B502B2426C360));
  }
  public ref HoverPoseFlags_t HoverPoseFlags {
    get => ref _Handle.AsRef<HoverPoseFlags_t>(Schema.GetOffset(0x914B502BE0BEF17B));
  }
  public ref float TouchOutputPerEntityDelay {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x914B502B0F1EF0C0));
  }
  public CEntityIOOutput OnDamaged {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x914B502B1667F41F));
  }
  public CEntityIOOutput OnAwakened {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x914B502B03EDBB66));
  }
  public CEntityIOOutput OnMotionEnabled {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x914B502BBB216C9F));
  }
  public CEntityIOOutput OnPlayerUse {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x914B502B611C9A14));
  }
  public CEntityIOOutput OnStartTouch {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x914B502BB4E38193));
  }
  public ref CHandle<CBasePlayerPawn> CarryingPlayer {
    get => ref _Handle.AsRef<CHandle<CBasePlayerPawn>>(Schema.GetOffset(0x914B502B0491B86F));
  }


}