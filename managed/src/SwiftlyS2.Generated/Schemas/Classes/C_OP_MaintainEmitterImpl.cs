// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class C_OP_MaintainEmitterImpl : CParticleFunctionEmitterImpl, C_OP_MaintainEmitter {

  public C_OP_MaintainEmitterImpl(nint handle) : base(handle) {
  }

  public CParticleCollectionFloatInput ParticlesToMaintain {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xAD7D6862537AE378));
  }
  public ref float StartTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xAD7D686267FE9DC4));
  }
  public CParticleCollectionFloatInput EmissionDuration {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xAD7D686290181C90));
  }
  public ref float EmissionRate {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xAD7D68620F6F6312));
  }
  public ref int SnapshotControlPoint {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xAD7D6862192638EC));
  }
  public ref CUtlString StrSnapshotSubset {
    get => ref _Handle.AsRef<CUtlString>(Schema.GetOffset(0xAD7D6862BD8A8E5E));
  }
  public ref bool EmitInstantaneously {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xAD7D686205EFA03B));
  }
  public ref bool FinalEmitOnStop {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xAD7D68626A482A7D));
  }
  public CParticleCollectionFloatInput Scale {
    get => new CParticleCollectionFloatInputImpl(_Handle + Schema.GetOffset(0xAD7D6862B731A42F));
  }


}