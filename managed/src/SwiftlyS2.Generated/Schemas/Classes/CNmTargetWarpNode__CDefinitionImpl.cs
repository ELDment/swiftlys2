// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CNmTargetWarpNode__CDefinitionImpl : CNmPoseNode__CDefinitionImpl, CNmTargetWarpNode__CDefinition {

  public CNmTargetWarpNode__CDefinitionImpl(nint handle) : base(handle) {
  }

  public ref short ClipReferenceNodeIdx {
    get => ref _Handle.AsRef<short>(Schema.GetOffset(0xEA16BCF061EC8947));
  }
  public ref short TargetValueNodeIdx {
    get => ref _Handle.AsRef<short>(Schema.GetOffset(0xEA16BCF0A040C7E8));
  }
  public ref CNmRootMotionData__SamplingMode_t SamplingMode {
    get => ref _Handle.AsRef<CNmRootMotionData__SamplingMode_t>(Schema.GetOffset(0xEA16BCF0DDB31BE3));
  }
  public ref bool AllowTargetUpdate {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xEA16BCF08A9C0712));
  }
  public ref float SamplingPositionErrorThresholdSq {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEA16BCF0C538C7A0));
  }
  public ref float MaxTangentLength {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEA16BCF046EAA410));
  }
  public ref float LerpFallbackDistanceThreshold {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEA16BCF0BBC41F32));
  }
  public ref float TargetUpdateDistanceThreshold {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEA16BCF074F10F17));
  }
  public ref float TargetUpdateAngleThresholdRadians {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0xEA16BCF09A1C1D31));
  }


}