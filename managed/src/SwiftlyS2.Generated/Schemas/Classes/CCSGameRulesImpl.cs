// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CCSGameRulesImpl : CTeamplayRulesImpl, CCSGameRules {

  public CCSGameRulesImpl(nint handle) : base(handle) {
  }

  public ref bool FreezePeriod {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF650DE408E3));
  }
  public ref bool WarmupPeriod {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6569684C44));
  }
  public GameTime_t WarmupPeriodEnd {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65BD3AFF1D));
  }
  public GameTime_t WarmupPeriodStart {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF6541805884));
  }
  public ref bool TerroristTimeOutActive {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF654A7D1ECE));
  }
  public ref bool CTTimeOutActive {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65E0DDAFEF));
  }
  public ref float TerroristTimeOutRemaining {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF652F2C703E));
  }
  public ref float CTTimeOutRemaining {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF655CCA1E5D));
  }
  public ref int TerroristTimeOuts {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65D622E821));
  }
  public ref int CTTimeOuts {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF659A215FA6));
  }
  public ref bool TechnicalTimeOut {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF656F9E16DB));
  }
  public ref bool MatchWaitingForResume {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6597B2188B));
  }
  public ref int RoundTime {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF659A5A5155));
  }
  public ref float MatchStartTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65386C0C9B));
  }
  public GameTime_t RoundStartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65C262EE3C));
  }
  public GameTime_t RestartRoundTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65F8CD3077));
  }
  public ref bool GameRestart {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6532CBD44E));
  }
  public ref float GameStartTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF6504E0446E));
  }
  public ref float TimeUntilNextPhaseStarts {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65B603E0DD));
  }
  public ref int GamePhase {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65CEC62EE2));
  }
  public ref int TotalRoundsPlayed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6556632103));
  }
  public ref int RoundsPlayedThisPhase {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65B48D294A));
  }
  public ref int OvertimePlaying {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6528CE7C44));
  }
  public ref int HostagesRemaining {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF653EA141EE));
  }
  public ref bool AnyHostageReached {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF652B1C585C));
  }
  public ref bool MapHasBombTarget {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF654D11B002));
  }
  public ref bool MapHasRescueZone {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF659173C714));
  }
  public ref bool MapHasBuyZone {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF654E29CC07));
  }
  public ref bool IsQueuedMatchmaking {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF659312AC70));
  }
  public ref int QueuedMatchmakingMode {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65B864CCF7));
  }
  public ref bool IsValveDS {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65B14BF634));
  }
  public ref bool LogoMap {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65B7FCD584));
  }
  public ref bool PlayAllStepSoundsOnServer {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF652A99CD66));
  }
  public ref int SpectatorSlotCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65EAB6814C));
  }
  public ref int MatchDevice {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65A68647C8));
  }
  public ref bool HasMatchStarted {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65366EB219));
  }
  public ref int NextMapInMapgroup {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65C6613F50));
  }
public ISchemaFixedString TournamentEventName {
    get => new SchemaFixedString(_Handle, 0x6295CF65D2FCF8C2, 512, 1, 1);
  }
public ISchemaFixedString TournamentEventStage {
    get => new SchemaFixedString(_Handle, 0x6295CF658177EF71, 512, 1, 1);
  }
public ISchemaFixedString MatchStatTxt {
    get => new SchemaFixedString(_Handle, 0x6295CF65D6472911, 512, 1, 1);
  }
public ISchemaFixedString TournamentPredictionsTxt {
    get => new SchemaFixedString(_Handle, 0x6295CF65A974A2B9, 512, 1, 1);
  }
  public ref int TournamentPredictionsPct {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF658E233B97));
  }
  public GameTime_t CMMItemDropRevealStartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF659669E4BE));
  }
  public GameTime_t CMMItemDropRevealEndTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65DDD1C05B));
  }
  public ref bool IsDroppingItems {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65A3EB7908));
  }
  public ref bool IsQuestEligible {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65814483B8));
  }
  public ref bool IsHltvActive {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF657F4E0DA5));
  }
public ISchemaFixedArray<ushort> ProhibitedItemIndices {
    get => new SchemaFixedArray<ushort>(_Handle, 0x6295CF65BFE8D026, 100, 2, 2);
  }
public ISchemaFixedArray<uint> TournamentActiveCasterAccounts {
    get => new SchemaFixedArray<uint>(_Handle, 0x6295CF6525481301, 4, 4, 4);
  }
  public ref int NumBestOfMaps {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6581B0F2D7));
  }
  public ref int HalloweenMaskListSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65EDB3E1E1));
  }
  public ref bool BombDropped {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65D690B299));
  }
  public ref bool BombPlanted {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF653C00B55F));
  }
  public ref int RoundWinStatus {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6538E1FC04));
  }
  public ref int RoundWinReason {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65879CEBD2));
  }
  public ref bool TCantBuy {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65E60964EF));
  }
  public ref bool CTCantBuy {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF655A190494));
  }
public ISchemaFixedArray<int> MatchStats_RoundResults {
    get => new SchemaFixedArray<int>(_Handle, 0x6295CF652BF6608F, 30, 4, 4);
  }
public ISchemaFixedArray<int> MatchStats_PlayersAlive_CT {
    get => new SchemaFixedArray<int>(_Handle, 0x6295CF650A468F9C, 30, 4, 4);
  }
public ISchemaFixedArray<int> MatchStats_PlayersAlive_T {
    get => new SchemaFixedArray<int>(_Handle, 0x6295CF65DCEE8755, 30, 4, 4);
  }
public ISchemaFixedArray<float> TeamRespawnWaveTimes {
    get => new SchemaFixedArray<float>(_Handle, 0x6295CF65A15A30B1, 32, 4, 4);
  }
  public SchemaUntypedField NextRespawnWave {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x6295CF65F28FB62F));
  }
  public ref Vector MinimapMins {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x6295CF6589AD2CA5));
  }
  public ref Vector MinimapMaxs {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x6295CF65F2B86C5F));
  }
public ISchemaFixedArray<float> MinimapVerticalSectionHeights {
    get => new SchemaFixedArray<float>(_Handle, 0x6295CF6537ADB2EF, 8, 4, 4);
  }
  public ref ulong UllLocalMatchID {
    get => ref _Handle.AsRef<ulong>(Schema.GetOffset(0x6295CF657D14A239));
  }
public ISchemaFixedArray<int> EndMatchMapGroupVoteTypes {
    get => new SchemaFixedArray<int>(_Handle, 0x6295CF65B4DAF10B, 10, 4, 4);
  }
public ISchemaFixedArray<int> EndMatchMapGroupVoteOptions {
    get => new SchemaFixedArray<int>(_Handle, 0x6295CF65BCAA50F4, 10, 4, 4);
  }
  public ref int EndMatchMapVoteWinner {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65F340D3E0));
  }
  public ref int NumConsecutiveCTLoses {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6548E3E309));
  }
  public ref int NumConsecutiveTerroristLoses {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF652335F53E));
  }
  public ref bool HasHostageBeenTouched {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6577F64274));
  }
  public GameTime_t IntermissionStartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65AAE918DC));
  }
  public GameTime_t IntermissionEndTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF652001CDA5));
  }
  public ref bool LevelInitialized {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6578E1A1F5));
  }
  public ref int TotalRoundsPlayed1 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65CE8C6A6C));
  }
  public ref int UnBalancedRounds {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65CA0B6F6E));
  }
  public ref bool EndMatchOnRoundReset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65D38350A1));
  }
  public ref bool EndMatchOnThink {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF650888575A));
  }
  public ref int FreezeTime {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6525D5D12E));
  }
  public ref int NumTerrorist {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65E58F0B9A));
  }
  public ref int NumCT {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF659668BCF3));
  }
  public ref int NumSpawnableTerrorist {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65EBC4398B));
  }
  public ref int NumSpawnableCT {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65A0723378));
  }
  public ref CUtlVector<int> SelectedHostageSpawnIndices {
    get => ref _Handle.AsRef<CUtlVector<int>>(Schema.GetOffset(0x6295CF65A24826BE));
  }
  public ref int SpawnPointsRandomSeed {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65EBBE08D1));
  }
  public ref bool FirstConnected {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6579971CBC));
  }
  public ref bool CompleteReset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65BE966675));
  }
  public ref bool PickNewTeamsOnReset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65CFEB1018));
  }
  public ref bool ScrambleTeamsOnRestart {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65170E54FC));
  }
  public ref bool SwapTeamsOnRestart {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65AC86A5EC));
  }
  public ref CUtlVector<int> EndMatchTiedVotes {
    get => ref _Handle.AsRef<CUtlVector<int>>(Schema.GetOffset(0x6295CF65FF26054E));
  }
  public ref bool NeedToAskPlayersForContinueVote {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65515BA5BD));
  }
  public ref uint NumQueuedMatchmakingAccounts {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF65A76A455A));
  }
  public ref float AvgPlayerRank {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF6549B0B220));
  }
  public ref CString QueuedMatchmakingReservationString {
    get => ref _Handle.AsRef<CString>(Schema.GetOffset(0x6295CF6559B26DA9));
  }
  public ref uint NumTotalTournamentDrops {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF65076A6E9A));
  }
  public ref uint NumSpectatorsCountMax {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF65F56B5802));
  }
  public ref uint NumSpectatorsCountMaxTV {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF6517CBEEDC));
  }
  public ref uint NumSpectatorsCountMaxLnk {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF65A5E767C5));
  }
  public ref int CTsAliveAtFreezetimeEnd {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6538E98EA0));
  }
  public ref int TerroristsAliveAtFreezetimeEnd {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65F0B1C429));
  }
  public ref bool ForceTeamChangeSilent {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF651F43946C));
  }
  public ref bool LoadingRoundBackupData {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF656F470127));
  }
  public ref int MatchInfoShowType {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6507378C3F));
  }
  public ref float MatchInfoDecidedTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF656BDD2C29));
  }
  public ref int MTeamDMLastWinningTeamNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6542E24ADA));
  }
  public ref float MTeamDMLastThinkTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65A25AB0DF));
  }
  public ref float TeamDMLastAnnouncementTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF653FA12D43));
  }
  public ref int AccountTerrorist {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6521CAD297));
  }
  public ref int AccountCT {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65A26CBB64));
  }
  public ref int SpawnPointCount_Terrorist {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF658D0E3AFB));
  }
  public ref int SpawnPointCount_CT {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65015F15A8));
  }
  public ref int MaxNumTerrorists {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65A1A2CFF9));
  }
  public ref int MaxNumCTs {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65FD61C7CA));
  }
  public ref int LoserBonusMostRecentTeam {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF657213B991));
  }
  public ref float TmNextPeriodicThink {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65A086B6B6));
  }
  public ref bool VoiceWonMatchBragFired {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65D9ADDBEC));
  }
  public ref float WarmupNextChatNoticeTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65F187B14B));
  }
  public ref int HostagesRescued {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF652486FAA5));
  }
  public ref int HostagesTouched {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65321A1F08));
  }
  public ref float NextHostageAnnouncement {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65DEE66A30));
  }
  public ref bool NoTerroristsKilled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6555F64934));
  }
  public ref bool NoCTsKilled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6592A7F5BF));
  }
  public ref bool NoEnemiesKilled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF658FA47D23));
  }
  public ref bool CanDonateWeapons {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6591A6B97B));
  }
  public ref float FirstKillTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF6501D98E54));
  }
  public ref float FirstBloodTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65A6A092F2));
  }
  public ref bool HostageWasInjured {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65AAB4D014));
  }
  public ref bool HostageWasKilled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65578A226E));
  }
  public ref bool VoteCalled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF657DE14E10));
  }
  public ref bool ServerVoteOnReset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF659AE52F3E));
  }
  public ref float VoteCheckThrottle {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF656F57ACF1));
  }
  public ref bool BuyTimeEnded {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65092EBA8E));
  }
  public ref int LastFreezeEndBeep {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65296880DB));
  }
  public ref bool TargetBombed {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF653A83E0F9));
  }
  public ref bool BombDefused {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65CA9F868D));
  }
  public ref bool MapHasBombZone {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65D3F4FD4D));
  }
  public ref Vector MainCTSpawnPos {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x6295CF65F44AF710));
  }
  public ref CUtlVector<PointerTo<SpawnPoint>> CTSpawnPointsMasterList {
    get => ref _Handle.AsRef<CUtlVector<PointerTo<SpawnPoint>>>(Schema.GetOffset(0x6295CF6582901578));
  }
  public ref CUtlVector<PointerTo<SpawnPoint>> TerroristSpawnPointsMasterList {
    get => ref _Handle.AsRef<CUtlVector<PointerTo<SpawnPoint>>>(Schema.GetOffset(0x6295CF65EC3D3B5D));
  }
  public ref bool RespawningAllRespawnablePlayers {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65F400C2A6));
  }
  public ref int NextCTSpawnPoint {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65932F53AD));
  }
  public ref float CTSpawnPointUsedTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65D6E09027));
  }
  public ref int NextTerroristSpawnPoint {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65516AD03A));
  }
  public ref float TerroristSpawnPointUsedTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF653A8AC4CC));
  }
  public ref CUtlVector<PointerTo<SpawnPoint>> CTSpawnPoints {
    get => ref _Handle.AsRef<CUtlVector<PointerTo<SpawnPoint>>>(Schema.GetOffset(0x6295CF6537BA1FB2));
  }
  public ref CUtlVector<PointerTo<SpawnPoint>> TerroristSpawnPoints {
    get => ref _Handle.AsRef<CUtlVector<PointerTo<SpawnPoint>>>(Schema.GetOffset(0x6295CF6506BE8E93));
  }
  public ref bool IsUnreservedGameServer {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65C691B4FF));
  }
  public ref float AutobalanceDisplayTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF65E23EE205));
  }
  public ref bool AllowWeaponSwitch {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65390E309A));
  }
  public ref bool RoundTimeWarningTriggered {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF650F402BE7));
  }
  public GameTime_t PhaseChangeAnnouncementTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65C4D59336));
  }
  public ref float NextUpdateTeamClanNamesTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF659127E011));
  }
  public GameTime_t LastThinkTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65D901F6A0));
  }
  public ref float AccumulatedRoundOffDamage {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x6295CF658FEFA145));
  }
  public ref int ShorthandedBonusLastEvalRound {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65AFC72D22));
  }
  public ref int MatchAbortedEarlyReason {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF658B4CFCE8));
  }
  public ref bool HasTriggeredRoundStartMusic {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65E34D873B));
  }
  public ref bool SwitchingTeamsAtRoundReset {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65AE3AF0A5));
  }
  public CCSGameModeRules GameModeRules {
    get => new CCSGameModeRulesImpl(_Handle.Read<nint>(Schema.GetOffset(0x6295CF650B12F105)));
  }
  public SchemaUntypedField BtGlobalBlackboard {
    get => new SchemaUntypedField(_Handle + Schema.GetOffset(0x6295CF654E62FE91));
  }
  public ref CHandle<CBaseEntity> PlayerResource {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x6295CF6553F9E5AE));
  }
  public CRetakeGameRules RetakeRules {
    get => new CRetakeGameRulesImpl(_Handle + Schema.GetOffset(0x6295CF65DB6D258A));
  }
public ISchemaFixedArray<CUtlVector<int>> TeamUniqueKillWeaponsMatch {
    get => new SchemaFixedArray<CUtlVector<int>>(_Handle, 0x6295CF65EB474B78, 4, 24, 8);
  }
public ISchemaFixedArray<bool> TeamLastKillUsedUniqueWeaponMatch {
    get => new SchemaFixedArray<bool>(_Handle, 0x6295CF65BCB471EB, 4, 1, 1);
  }
  public ref byte MatchEndCount {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0x6295CF65FCD08D2E));
  }
  public ref int TTeamIntroVariant {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF652843B819));
  }
  public ref int CTTeamIntroVariant {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65A4E902BC));
  }
  public ref bool TeamIntroPeriod {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6550FCE177));
  }
  public GameTime_t TeamIntroPeriodEnd {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x6295CF65E9D7AE78));
  }
  public ref bool PlayedTeamIntroVO {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6520AF50EC));
  }
  public ref int RoundEndWinnerTeam {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6556870D0B));
  }
  public ref int RoundEndReason {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6507672B11));
  }
  public ref bool RoundEndShowTimerDefend {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF6594C342DA));
  }
  public ref int RoundEndTimerTime {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65ED1EF5CF));
  }
  public ref CUtlString RoundEndFunFactToken {
    get => ref _Handle.AsRef<CUtlString>(Schema.GetOffset(0x6295CF653C86499F));
  }
  public ref uint RoundEndFunFactPlayerSlot {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x6295CF65FA215C79));
  }
  public ref int RoundEndFunFactData1 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF657F5515C3));
  }
  public ref int RoundEndFunFactData2 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF6580551756));
  }
  public ref int RoundEndFunFactData3 {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65815518E9));
  }
  public ref CUtlString RoundEndMessage {
    get => ref _Handle.AsRef<CUtlString>(Schema.GetOffset(0x6295CF65CE64850E));
  }
  public ref int RoundEndPlayerCount {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65C873652B));
  }
  public ref bool RoundEndNoMusic {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6295CF65E76CDBDA));
  }
  public ref int RoundEndLegacy {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF658DA31C1A));
  }
  public ref byte RoundEndCount {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0x6295CF650FBD0053));
  }
  public ref int RoundStartRoundNumber {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6295CF65F4340311));
  }
  public ref byte RoundStartCount {
    get => ref _Handle.AsRef<byte>(Schema.GetOffset(0x6295CF65B018A784));
  }
  public ref double LastPerfSampleTime {
    get => ref _Handle.AsRef<double>(Schema.GetOffset(0x6295CF650AB327AB));
  }

  public void FreezePeriodUpdated() {
    Schema.Update(_Handle, 0x6295CF650DE408E3);
  }
  public void WarmupPeriodUpdated() {
    Schema.Update(_Handle, 0x6295CF6569684C44);
  }
  public void WarmupPeriodEndUpdated() {
    Schema.Update(_Handle, 0x6295CF65BD3AFF1D);
  }
  public void WarmupPeriodStartUpdated() {
    Schema.Update(_Handle, 0x6295CF6541805884);
  }
  public void TerroristTimeOutActiveUpdated() {
    Schema.Update(_Handle, 0x6295CF654A7D1ECE);
  }
  public void CTTimeOutActiveUpdated() {
    Schema.Update(_Handle, 0x6295CF65E0DDAFEF);
  }
  public void TerroristTimeOutRemainingUpdated() {
    Schema.Update(_Handle, 0x6295CF652F2C703E);
  }
  public void CTTimeOutRemainingUpdated() {
    Schema.Update(_Handle, 0x6295CF655CCA1E5D);
  }
  public void TerroristTimeOutsUpdated() {
    Schema.Update(_Handle, 0x6295CF65D622E821);
  }
  public void CTTimeOutsUpdated() {
    Schema.Update(_Handle, 0x6295CF659A215FA6);
  }
  public void TechnicalTimeOutUpdated() {
    Schema.Update(_Handle, 0x6295CF656F9E16DB);
  }
  public void MatchWaitingForResumeUpdated() {
    Schema.Update(_Handle, 0x6295CF6597B2188B);
  }
  public void RoundTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF659A5A5155);
  }
  public void MatchStartTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF65386C0C9B);
  }
  public void RoundStartTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF65C262EE3C);
  }
  public void RestartRoundTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF65F8CD3077);
  }
  public void GameRestartUpdated() {
    Schema.Update(_Handle, 0x6295CF6532CBD44E);
  }
  public void GameStartTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF6504E0446E);
  }
  public void TimeUntilNextPhaseStartsUpdated() {
    Schema.Update(_Handle, 0x6295CF65B603E0DD);
  }
  public void GamePhaseUpdated() {
    Schema.Update(_Handle, 0x6295CF65CEC62EE2);
  }
  public void TotalRoundsPlayedUpdated() {
    Schema.Update(_Handle, 0x6295CF6556632103);
  }
  public void RoundsPlayedThisPhaseUpdated() {
    Schema.Update(_Handle, 0x6295CF65B48D294A);
  }
  public void OvertimePlayingUpdated() {
    Schema.Update(_Handle, 0x6295CF6528CE7C44);
  }
  public void HostagesRemainingUpdated() {
    Schema.Update(_Handle, 0x6295CF653EA141EE);
  }
  public void AnyHostageReachedUpdated() {
    Schema.Update(_Handle, 0x6295CF652B1C585C);
  }
  public void MapHasBombTargetUpdated() {
    Schema.Update(_Handle, 0x6295CF654D11B002);
  }
  public void MapHasRescueZoneUpdated() {
    Schema.Update(_Handle, 0x6295CF659173C714);
  }
  public void MapHasBuyZoneUpdated() {
    Schema.Update(_Handle, 0x6295CF654E29CC07);
  }
  public void IsQueuedMatchmakingUpdated() {
    Schema.Update(_Handle, 0x6295CF659312AC70);
  }
  public void QueuedMatchmakingModeUpdated() {
    Schema.Update(_Handle, 0x6295CF65B864CCF7);
  }
  public void IsValveDSUpdated() {
    Schema.Update(_Handle, 0x6295CF65B14BF634);
  }
  public void LogoMapUpdated() {
    Schema.Update(_Handle, 0x6295CF65B7FCD584);
  }
  public void PlayAllStepSoundsOnServerUpdated() {
    Schema.Update(_Handle, 0x6295CF652A99CD66);
  }
  public void SpectatorSlotCountUpdated() {
    Schema.Update(_Handle, 0x6295CF65EAB6814C);
  }
  public void MatchDeviceUpdated() {
    Schema.Update(_Handle, 0x6295CF65A68647C8);
  }
  public void HasMatchStartedUpdated() {
    Schema.Update(_Handle, 0x6295CF65366EB219);
  }
  public void NextMapInMapgroupUpdated() {
    Schema.Update(_Handle, 0x6295CF65C6613F50);
  }
  public void TournamentEventNameUpdated() {
    Schema.Update(_Handle, 0x6295CF65D2FCF8C2);
  }
  public void TournamentEventStageUpdated() {
    Schema.Update(_Handle, 0x6295CF658177EF71);
  }
  public void MatchStatTxtUpdated() {
    Schema.Update(_Handle, 0x6295CF65D6472911);
  }
  public void TournamentPredictionsTxtUpdated() {
    Schema.Update(_Handle, 0x6295CF65A974A2B9);
  }
  public void TournamentPredictionsPctUpdated() {
    Schema.Update(_Handle, 0x6295CF658E233B97);
  }
  public void CMMItemDropRevealStartTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF659669E4BE);
  }
  public void CMMItemDropRevealEndTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF65DDD1C05B);
  }
  public void IsDroppingItemsUpdated() {
    Schema.Update(_Handle, 0x6295CF65A3EB7908);
  }
  public void IsQuestEligibleUpdated() {
    Schema.Update(_Handle, 0x6295CF65814483B8);
  }
  public void IsHltvActiveUpdated() {
    Schema.Update(_Handle, 0x6295CF657F4E0DA5);
  }
  public void ProhibitedItemIndicesUpdated() {
    Schema.Update(_Handle, 0x6295CF65BFE8D026);
  }
  public void TournamentActiveCasterAccountsUpdated() {
    Schema.Update(_Handle, 0x6295CF6525481301);
  }
  public void NumBestOfMapsUpdated() {
    Schema.Update(_Handle, 0x6295CF6581B0F2D7);
  }
  public void HalloweenMaskListSeedUpdated() {
    Schema.Update(_Handle, 0x6295CF65EDB3E1E1);
  }
  public void BombDroppedUpdated() {
    Schema.Update(_Handle, 0x6295CF65D690B299);
  }
  public void BombPlantedUpdated() {
    Schema.Update(_Handle, 0x6295CF653C00B55F);
  }
  public void RoundWinStatusUpdated() {
    Schema.Update(_Handle, 0x6295CF6538E1FC04);
  }
  public void RoundWinReasonUpdated() {
    Schema.Update(_Handle, 0x6295CF65879CEBD2);
  }
  public void TCantBuyUpdated() {
    Schema.Update(_Handle, 0x6295CF65E60964EF);
  }
  public void CTCantBuyUpdated() {
    Schema.Update(_Handle, 0x6295CF655A190494);
  }
  public void MatchStats_RoundResultsUpdated() {
    Schema.Update(_Handle, 0x6295CF652BF6608F);
  }
  public void MatchStats_PlayersAlive_CTUpdated() {
    Schema.Update(_Handle, 0x6295CF650A468F9C);
  }
  public void MatchStats_PlayersAlive_TUpdated() {
    Schema.Update(_Handle, 0x6295CF65DCEE8755);
  }
  public void TeamRespawnWaveTimesUpdated() {
    Schema.Update(_Handle, 0x6295CF65A15A30B1);
  }
  public void NextRespawnWaveUpdated() {
    Schema.Update(_Handle, 0x6295CF65F28FB62F);
  }
  public void MinimapMinsUpdated() {
    Schema.Update(_Handle, 0x6295CF6589AD2CA5);
  }
  public void MinimapMaxsUpdated() {
    Schema.Update(_Handle, 0x6295CF65F2B86C5F);
  }
  public void MinimapVerticalSectionHeightsUpdated() {
    Schema.Update(_Handle, 0x6295CF6537ADB2EF);
  }
  public void EndMatchMapGroupVoteTypesUpdated() {
    Schema.Update(_Handle, 0x6295CF65B4DAF10B);
  }
  public void EndMatchMapGroupVoteOptionsUpdated() {
    Schema.Update(_Handle, 0x6295CF65BCAA50F4);
  }
  public void EndMatchMapVoteWinnerUpdated() {
    Schema.Update(_Handle, 0x6295CF65F340D3E0);
  }
  public void NumConsecutiveCTLosesUpdated() {
    Schema.Update(_Handle, 0x6295CF6548E3E309);
  }
  public void NumConsecutiveTerroristLosesUpdated() {
    Schema.Update(_Handle, 0x6295CF652335F53E);
  }
  public void MatchAbortedEarlyReasonUpdated() {
    Schema.Update(_Handle, 0x6295CF658B4CFCE8);
  }
  public void GameModeRulesUpdated() {
    Schema.Update(_Handle, 0x6295CF650B12F105);
  }
  public void RetakeRulesUpdated() {
    Schema.Update(_Handle, 0x6295CF65DB6D258A);
  }
  public void MatchEndCountUpdated() {
    Schema.Update(_Handle, 0x6295CF65FCD08D2E);
  }
  public void TTeamIntroVariantUpdated() {
    Schema.Update(_Handle, 0x6295CF652843B819);
  }
  public void CTTeamIntroVariantUpdated() {
    Schema.Update(_Handle, 0x6295CF65A4E902BC);
  }
  public void TeamIntroPeriodUpdated() {
    Schema.Update(_Handle, 0x6295CF6550FCE177);
  }
  public void RoundEndWinnerTeamUpdated() {
    Schema.Update(_Handle, 0x6295CF6556870D0B);
  }
  public void RoundEndReasonUpdated() {
    Schema.Update(_Handle, 0x6295CF6507672B11);
  }
  public void RoundEndShowTimerDefendUpdated() {
    Schema.Update(_Handle, 0x6295CF6594C342DA);
  }
  public void RoundEndTimerTimeUpdated() {
    Schema.Update(_Handle, 0x6295CF65ED1EF5CF);
  }
  public void RoundEndFunFactTokenUpdated() {
    Schema.Update(_Handle, 0x6295CF653C86499F);
  }
  public void RoundEndFunFactPlayerSlotUpdated() {
    Schema.Update(_Handle, 0x6295CF65FA215C79);
  }
  public void RoundEndFunFactData1Updated() {
    Schema.Update(_Handle, 0x6295CF657F5515C3);
  }
  public void RoundEndFunFactData2Updated() {
    Schema.Update(_Handle, 0x6295CF6580551756);
  }
  public void RoundEndFunFactData3Updated() {
    Schema.Update(_Handle, 0x6295CF65815518E9);
  }
  public void RoundEndMessageUpdated() {
    Schema.Update(_Handle, 0x6295CF65CE64850E);
  }
  public void RoundEndPlayerCountUpdated() {
    Schema.Update(_Handle, 0x6295CF65C873652B);
  }
  public void RoundEndNoMusicUpdated() {
    Schema.Update(_Handle, 0x6295CF65E76CDBDA);
  }
  public void RoundEndLegacyUpdated() {
    Schema.Update(_Handle, 0x6295CF658DA31C1A);
  }
  public void RoundEndCountUpdated() {
    Schema.Update(_Handle, 0x6295CF650FBD0053);
  }
  public void RoundStartRoundNumberUpdated() {
    Schema.Update(_Handle, 0x6295CF65F4340311);
  }
  public void RoundStartCountUpdated() {
    Schema.Update(_Handle, 0x6295CF65B018A784);
  }
}