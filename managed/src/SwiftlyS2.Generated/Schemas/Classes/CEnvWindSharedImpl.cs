// <auto-generated />

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CEnvWindSharedImpl : SchemaClass, CEnvWindShared {

  public CEnvWindSharedImpl(nint handle) : base(handle) {
  }

  public GameTime_t StartTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x4E8F86FE67FE9DC4));
  }
  public ref uint WindSeed {
    get => ref _Handle.AsRef<uint>(Schema.GetOffset(0x4E8F86FE2F7E304B));
  }
  public ref ushort MinWind {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FE19B7F0B6));
  }
  public ref ushort MaxWind {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FE427465A0));
  }
  public ref int WindRadius {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4E8F86FED57577F5));
  }
  public ref ushort MinGust {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FEA1FFC04F));
  }
  public ref ushort MaxGust {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FEF0A3B1C9));
  }
  public ref float MinGustDelay {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E8F86FE2A8BCB2D));
  }
  public ref float MaxGustDelay {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E8F86FE53D781CF));
  }
  public ref float GustDuration {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E8F86FE1FD88D18));
  }
  public ref ushort GustDirChange {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FE945BF5C6));
  }
  public ref ushort InitialWindDir {
    get => ref _Handle.AsRef<ushort>(Schema.GetOffset(0x4E8F86FE84BFDBBD));
  }
  public ref float InitialWindSpeed {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4E8F86FE1670F5CA));
  }
  public ref Vector Location {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x4E8F86FEC4993A46));
  }
  public CEntityIOOutput OnGustStart {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x4E8F86FE2832424D));
  }
  public CEntityIOOutput OnGustEnd {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x4E8F86FE82E285B4));
  }
  public ref CHandle<CBaseEntity> EntOwner {
    get => ref _Handle.AsRef<CHandle<CBaseEntity>>(Schema.GetOffset(0x4E8F86FED837CB33));
  }

  public void StartTimeUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE67FE9DC4);
  }
  public void WindSeedUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE2F7E304B);
  }
  public void MinWindUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE19B7F0B6);
  }
  public void MaxWindUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE427465A0);
  }
  public void WindRadiusUpdated() {
    Schema.Update(_Handle, 0x4E8F86FED57577F5);
  }
  public void MinGustUpdated() {
    Schema.Update(_Handle, 0x4E8F86FEA1FFC04F);
  }
  public void MaxGustUpdated() {
    Schema.Update(_Handle, 0x4E8F86FEF0A3B1C9);
  }
  public void MinGustDelayUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE2A8BCB2D);
  }
  public void MaxGustDelayUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE53D781CF);
  }
  public void GustDurationUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE1FD88D18);
  }
  public void GustDirChangeUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE945BF5C6);
  }
  public void InitialWindDirUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE84BFDBBD);
  }
  public void InitialWindSpeedUpdated() {
    Schema.Update(_Handle, 0x4E8F86FE1670F5CA);
  }
  public void LocationUpdated() {
    Schema.Update(_Handle, 0x4E8F86FEC4993A46);
  }
}