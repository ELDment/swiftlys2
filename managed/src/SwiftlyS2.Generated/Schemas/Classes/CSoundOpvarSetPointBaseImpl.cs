// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CSoundOpvarSetPointBaseImpl : CBaseEntityImpl, CSoundOpvarSetPointBase {

  public CSoundOpvarSetPointBaseImpl(nint handle) : base(handle) {
  }

  public ref bool Disabled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6C95A3E03A7C5965));
  }
  public ref CHandle<CEntityInstance> Source {
    get => ref _Handle.AsRef<CHandle<CEntityInstance>>(Schema.GetOffset(0x6C95A3E033D3CD82));
  }
  public string SourceEntityName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x6C95A3E06C1387C0));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x6C95A3E06C1387C0, value);
  } 
  public ref Vector LastPosition {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x6C95A3E0A5B68002));
  }
  public string StackName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x6C95A3E03B3E9CD4));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x6C95A3E03B3E9CD4, value);
  } 
  public string OperatorName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x6C95A3E0F6140996));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x6C95A3E0F6140996, value);
  } 
  public string OpvarName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x6C95A3E02CAEFF3C));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x6C95A3E02CAEFF3C, value);
  } 
  public ref int OpvarIndex {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x6C95A3E0BC170C34));
  }
  public ref bool UseAutoCompare {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x6C95A3E0E8C88ED2));
  }

  public void StackNameUpdated() {
    Schema.Update(_Handle, 0x6C95A3E03B3E9CD4);
  }
  public void OperatorNameUpdated() {
    Schema.Update(_Handle, 0x6C95A3E0F6140996);
  }
  public void OpvarNameUpdated() {
    Schema.Update(_Handle, 0x6C95A3E02CAEFF3C);
  }
  public void OpvarIndexUpdated() {
    Schema.Update(_Handle, 0x6C95A3E0BC170C34);
  }
  public void UseAutoCompareUpdated() {
    Schema.Update(_Handle, 0x6C95A3E0E8C88ED2);
  }
}