// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CAI_ExpresserImpl : SchemaClass, CAI_Expresser {

  public CAI_ExpresserImpl(nint handle) : base(handle) {
  }

  public GameTime_t StopTalkTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xFB9DA1AC36131EC4));
  }
  public GameTime_t StopTalkTimeWithoutDelay {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xFB9DA1ACB3CAE32F));
  }
  public GameTime_t QueuedSpeechTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xFB9DA1AC93DE376D));
  }
  public GameTime_t BlockedTalkTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xFB9DA1AC2A2AC272));
  }
  public ref int VoicePitch {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xFB9DA1ACAB038A45));
  }
  public GameTime_t LastTimeAcceptedSpeak {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0xFB9DA1AC8D9FF64F));
  }
  public ref bool AllowSpeakingInterrupts {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xFB9DA1ACC77E4694));
  }
  public ref bool ConsiderSceneInvolvementAsSpeech {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xFB9DA1ACB1C249B1));
  }
  public ref bool SceneEntityDisabled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0xFB9DA1AC6AC7EEF4));
  }
  public ref int LastSpokenPriority {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0xFB9DA1AC9722D67B));
  }
  public CBaseFlex? Outer {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0xFB9DA1AC7359CF3A));
      return ptr.IsValidPtr() ? new CBaseFlexImpl(ptr) : null;
    }
  }


}