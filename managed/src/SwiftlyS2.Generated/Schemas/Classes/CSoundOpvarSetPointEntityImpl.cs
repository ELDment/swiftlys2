// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CSoundOpvarSetPointEntityImpl : CSoundOpvarSetPointBaseImpl, CSoundOpvarSetPointEntity {

  public CSoundOpvarSetPointEntityImpl(nint handle) : base(handle) {
  }

  public CEntityIOOutput OnEnter {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x20C7B9D2BEFE0C56));
  }
  public CEntityIOOutput OnExit {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x20C7B9D2DBE3B800));
  }
  public ref bool AutoDisable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x20C7B9D2EB2D561E));
  }
  public ref float DistanceMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D2EFD80FE4));
  }
  public ref float DistanceMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D2FDEBADA6));
  }
  public ref float DistanceMapMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D20597EACA));
  }
  public ref float DistanceMapMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D20FAB8240));
  }
  public ref float OcclusionRadius {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D289718616));
  }
  public ref float OcclusionMin {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D262E6EDCC));
  }
  public ref float OcclusionMax {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D270D37C1E));
  }
  public ref float ValSetOnDisable {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D2B0981239));
  }
  public ref bool SetValueOnDisable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x20C7B9D2C65C0E77));
  }
  public ref bool Reloading {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x20C7B9D2214BCD0C));
  }
  public ref int SimulationMode {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x20C7B9D2F03B8CF9));
  }
  public ref int VisibilitySamples {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x20C7B9D26F7CDB90));
  }
  public ref Vector DynamicProxyPoint {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x20C7B9D27E7B7DE0));
  }
  public ref float DynamicMaximumOcclusion {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D22C356E6F));
  }
  public ref CHandle<CEntityInstance> DynamicEntity {
    get => ref _Handle.AsRef<CHandle<CEntityInstance>>(Schema.GetOffset(0x20C7B9D235753447));
  }
  public string DynamicEntityName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x20C7B9D28FB78B06));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x20C7B9D28FB78B06, value);
  } 
  public ref float PathingDistanceNormFactor {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x20C7B9D25735CE5A));
  }
  public ref Vector PathingSourcePos {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x20C7B9D209C40953));
  }
  public ref Vector PathingListenerPos {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x20C7B9D271BDE848));
  }
  public ref Vector PathingDirection {
    get => ref _Handle.AsRef<Vector>(Schema.GetOffset(0x20C7B9D2CFA4D6D3));
  }
  public ref int PathingSourceIndex {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x20C7B9D2830DE611));
  }


}