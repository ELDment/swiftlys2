// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CBaseButtonImpl : CBaseToggleImpl, CBaseButton {

  public CBaseButtonImpl(nint handle) : base(handle) {
  }

  public ref QAngle MoveEntitySpace {
    get => ref _Handle.AsRef<QAngle>(Schema.GetOffset(0x1911FA7F325319F9));
  }
  public ref bool StayPushed {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7FF5E81349));
  }
  public ref bool Rotating {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7F6DAD9199));
  }
  public locksound_t Ls {
    get => new locksound_tImpl(_Handle + Schema.GetOffset(0x1911FA7FD3B05E88));
  }
  public string UseSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7FCCC8AC24));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7FCCC8AC24, value);
  } 
  public string LockedSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7FB3FCB84B));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7FB3FCB84B, value);
  } 
  public string UnlockedSound {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7FDC697A96));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7FDC697A96, value);
  } 
  public string OverrideAnticipationName {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7FDBCCC724));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7FDBCCC724, value);
  } 
  public ref bool Locked {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7FD08E97F3));
  }
  public ref bool Disabled {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7F3A7C5965));
  }
  public GameTime_t UseLockedTime {
    get => new GameTime_tImpl(_Handle + Schema.GetOffset(0x1911FA7FE94A05A1));
  }
  public ref bool SolidBsp {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7FA50CEC89));
  }
  public CEntityIOOutput OnDamaged {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x1911FA7F1667F41F));
  }
  public CEntityIOOutput OnPressed {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x1911FA7F6707E726));
  }
  public CEntityIOOutput OnUseLocked {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x1911FA7FE603388D));
  }
  public CEntityIOOutput OnIn {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x1911FA7FE9F7186F));
  }
  public CEntityIOOutput OnOut {
    get => new CEntityIOOutputImpl(_Handle + Schema.GetOffset(0x1911FA7FF28E1D54));
  }
  public ref int State {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x1911FA7F7C824322));
  }
  public ref CHandle<CEntityInstance> Constraint {
    get => ref _Handle.AsRef<CHandle<CEntityInstance>>(Schema.GetOffset(0x1911FA7F16F916EC));
  }
  public ref CHandle<CEntityInstance> ConstraintParent {
    get => ref _Handle.AsRef<CHandle<CEntityInstance>>(Schema.GetOffset(0x1911FA7F0E2D0AA4));
  }
  public ref bool ForceNpcExclude {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7F4194963F));
  }
  public string GlowEntity {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7F8B25D228));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7F8B25D228, value);
  } 
  public ref CHandle<CBaseModelEntity> GlowEntity1 {
    get => ref _Handle.AsRef<CHandle<CBaseModelEntity>>(Schema.GetOffset(0x1911FA7F35C883E7));
  }
  public ref bool Usable {
    get => ref _Handle.AsRef<bool>(Schema.GetOffset(0x1911FA7F44B8E369));
  }
  public string DisplayText {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x1911FA7FDE5320C5));
      return Schema.GetString(ptr);
    }
    set => Schema.SetString(_Handle, 0x1911FA7FDE5320C5, value);
  } 

  public void GlowEntity1Updated() {
    Schema.Update(_Handle, 0x1911FA7F35C883E7);
  }
  public void UsableUpdated() {
    Schema.Update(_Handle, 0x1911FA7F44B8E369);
  }
  public void DisplayTextUpdated() {
    Schema.Update(_Handle, 0x1911FA7FDE5320C5);
  }
}