// <auto-generated />
#pragma warning disable CS0108
#nullable enable

using SwiftlyS2.Core.Schemas;
using SwiftlyS2.Shared.Schemas;
using SwiftlyS2.Shared.SchemaDefinitions;
using SwiftlyS2.Shared.Natives;
using SwiftlyS2.Core.Extensions;

namespace SwiftlyS2.Core.SchemaDefinitions;

internal partial class CBaseMoveBehaviorImpl : CPathKeyFrameImpl, CBaseMoveBehavior {

  public CBaseMoveBehaviorImpl(nint handle) : base(handle) {
  }

  public ref int PositionInterpolator {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4C94E06076D631CA));
  }
  public ref int RotationInterpolator {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4C94E060D5ABDED3));
  }
  public ref float AnimStartTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4C94E060C2FA1CCF));
  }
  public ref float AnimEndTime {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4C94E06042C3E66A));
  }
  public ref float AverageSpeedAcrossFrame {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4C94E0603F4A5B51));
  }
  public CPathKeyFrame? CurrentKeyFrame {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x4C94E060AF22FD24));
      return ptr.IsValidPtr() ? new CPathKeyFrameImpl(ptr) : null;
    }
  }
  public CPathKeyFrame? TargetKeyFrame {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x4C94E0606B9E13EA));
      return ptr.IsValidPtr() ? new CPathKeyFrameImpl(ptr) : null;
    }
  }
  public CPathKeyFrame? PreKeyFrame {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x4C94E0609753526C));
      return ptr.IsValidPtr() ? new CPathKeyFrameImpl(ptr) : null;
    }
  }
  public CPathKeyFrame? PostKeyFrame {
    get {
      var ptr = _Handle.Read<nint>(Schema.GetOffset(0x4C94E06033EC8ED5));
      return ptr.IsValidPtr() ? new CPathKeyFrameImpl(ptr) : null;
    }
  }
  public ref float TimeIntoFrame {
    get => ref _Handle.AsRef<float>(Schema.GetOffset(0x4C94E060C6B111CD));
  }
  public ref int Direction {
    get => ref _Handle.AsRef<int>(Schema.GetOffset(0x4C94E0606BDD23E5));
  }


}