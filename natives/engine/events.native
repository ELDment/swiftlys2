class Events

void RegisterOnGameTickCallback = ptr callback // bool simulating, bool first, bool last -> void
void RegisterOnClientConnectCallback = ptr callback // int32 playerid -> bool (true -> ignored, false -> supercede)
void RegisterOnClientDisconnectCallback = ptr callback // int32 playerid, ENetworkDisconnectReason (int32) reason -> void
void RegisterOnClientKeyStateChangedCallback = ptr callback // int32 playerid, string key, bool pressed -> void
void RegisterOnClientProcessUsercmdsCallback = ptr callback // int32 playerid, ptr* usercmds, int numcmds, bool paused, float margin -> void
void RegisterOnClientPutInServerCallback = ptr callback // int32 playerid, int32 client_kind (0 -> player, 1 -> bot, 2 -> unknown) -> void
void RegisterOnClientSteamAuthorizeCallback = ptr callback // int32 playerid -> void
void RegisterOnClientSteamAuthorizeFailCallback = ptr callback // int32 playerid -> void
void RegisterOnEntityCreatedCallback = ptr callback // CEntityInstance* entity
void RegisterOnEntityDeletedCallback = ptr callback // CEntityInstance* entity
void RegisterOnEntityParentChangedCallback = ptr callback // CEntityInstance* entity, CEntityInstance* newparent
void RegisterOnEntitySpawnedCallback = ptr callback // CEntityInstance* entity
void RegisterOnMapLoadCallback = ptr callback // string mapname
void RegisterOnMapUnloadCallback = ptr callback // string mapname
void RegisterOnEntityTakeDamageCallback = ptr callback // CBaseEntity* entity, CTakeDamageInfo* info -> bool (true -> ignored, false -> supercede)
void RegisterOnPrecacheResourceCallback = ptr callback // IEntityResourceManifest* pResourceManifest